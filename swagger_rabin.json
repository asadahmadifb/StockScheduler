{
  "openapi": "3.0.1",
  "info": {
    "title": "Tse",
    "description": "Rabin - Tse Api Gateway",
    "contact": {
      "name": "Rabin intelligent ideas, development team",
      "url": "https://rabinideas.ir",
      "email": ""
    },
    "version": "v 2.0.0.372"
  },
  "paths": {
    "/api/account/state": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get customer account state",
        "description": "result csv map: State(Normal, AtRisk, CallMargin), Deficit",
        "operationId": "GetAccountState",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/account/bank-account": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get customer bank accounts",
        "description": "result data map: Id, BankName, Branch, AccountNumber, Sheba, BranchCity, IsDefault",
        "operationId": "GetCustomerBankAccount",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Add new customer bank account",
        "operationId": "AddCustomerBankAccount",
        "requestBody": {
          "description": "",
          "content": {
            "text/plain": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PostBankAccount"
                  }
                ]
              }
            },
            "application/octet-stream": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PostBankAccount"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PostBankAccount"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PostBankAccount"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PostBankAccount"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/account/bank-account/{id}/default": {
      "put": {
        "tags": [
          "Account"
        ],
        "summary": "Change default customer bank account",
        "operationId": "ChangeDefaultBankAccount",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/account/bank": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get bank list",
        "operationId": "GetBank",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/account/city/{keyword}": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Search city list",
        "operationId": "GetCity",
        "parameters": [
          {
            "name": "keyword",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/account/bank-account-type": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get bank branch list",
        "operationId": "GetBankAccountType",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/account/document-type": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get customer document types",
        "operationId": "GetDocumentType",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/account/document": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get customer document list",
        "description": "resilt csv map : Id, DocumentTypeId, DocumentTypeTitle, ChangeDate",
        "operationId": "GetDocument",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/account/document-picture": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Add or update customer picture",
        "operationId": "UpdateCustomerPicture",
        "requestBody": {
          "content": {
            "text/plain": {
              "schema": {
                "maxLength": 1024000,
                "type": "string"
              }
            },
            "application/octet-stream": {
              "schema": {
                "maxLength": 1024000,
                "type": "string"
              }
            },
            "application/json": {
              "schema": {
                "maxLength": 1024000,
                "type": "string"
              }
            },
            "text/json": {
              "schema": {
                "maxLength": 1024000,
                "type": "string"
              }
            },
            "application/*+json": {
              "schema": {
                "maxLength": 1024000,
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/account/document/{id}": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get customer document content by document-id",
        "operationId": "GetDocumentContent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/account/document/{documentTypeId}": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get customer document content by document-type",
        "operationId": "GetDocumentContentByDocumentType",
        "parameters": [
          {
            "name": "documentTypeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/account/document-request": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get document request",
        "description": "result csv map : Id, DocumentType, Date, State, StateTitle",
        "operationId": "GetDocumentRequest",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 5
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Add document request",
        "operationId": "AddDocumentRequest",
        "requestBody": {
          "description": "",
          "content": {
            "text/plain": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PostDocumentRequestModel"
                  }
                ]
              }
            },
            "application/octet-stream": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PostDocumentRequestModel"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PostDocumentRequestModel"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PostDocumentRequestModel"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PostDocumentRequestModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/account/document-request/{id}/content": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get document request content",
        "operationId": "GetDocumentRequestContent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/account/document-request/{id}": {
      "delete": {
        "tags": [
          "Account"
        ],
        "summary": "Cancel document request",
        "operationId": "CancelDocumentRequest",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/account/bourse-account": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get customer bourse account",
        "description": "result csv map : Id, TypeId, TypeTitle, Code, AccountNumber",
        "operationId": "GetBourseAccount",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/account/email/{address}": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Send change email verification to new email address",
        "operationId": "ChangeEmail",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "valid email address",
            "required": true,
            "schema": {
              "pattern": "^\\S+@\\S+\\.\\S+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/account/verify-email/{otp}": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Verify change email verifivcation and new address",
        "operationId": "VerifyChangeEmailRequest",
        "parameters": [
          {
            "name": "otp",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/account/rayan-block": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Check rayan account state",
        "description": "result csv map : IsBlock, State(0:none, 1:pending)",
        "operationId": "IsRayanBlock",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "deprecated": true
      },
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Check rayan account state",
        "operationId": "RequestBlockRayanAccount",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "deprecated": true
      }
    },
    "/api/account/parent": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get customer parent (gurdian)",
        "description": "result data map: Title, NationalCode, InvestorAccountCode",
        "operationId": "GetParent",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/account/children": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get customer children (under guardian)",
        "description": "result data map: Title, NationalCode, InvestorAccountCode, BirthDate",
        "operationId": "GetChildren",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/account/sejam": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Request sejam otp",
        "operationId": "RequestSejamOtp",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/account/sejam/{otp}/verify": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Verify sejam otp",
        "operationId": "VerifySejamOtp",
        "parameters": [
          {
            "name": "otp",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/agreement": {
      "get": {
        "tags": [
          "Agreement"
        ],
        "summary": "Get All agreements report",
        "description": "data map: Id, Title, Code, Signed, DocumentId, Isins",
        "operationId": "GetAgreements",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/agreement/{id}/document": {
      "get": {
        "tags": [
          "Agreement"
        ],
        "summary": "Get aggrement content document by id",
        "operationId": "GetById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "aggrement id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/agreement/{agreementId}": {
      "post": {
        "tags": [
          "Agreement"
        ],
        "summary": "Sign agreement",
        "operationId": "SignAgreement",
        "parameters": [
          {
            "name": "agreementId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "Agreement"
        ],
        "summary": "Unsign agreement",
        "operationId": "UnsignAgreement",
        "parameters": [
          {
            "name": "agreementId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/authentication/captcha": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Get captcha",
        "description": "Image is Base64\r\n\n converter: https://codebeautify.org/base64-to-image-converter",
        "operationId": "Captcha",
        "parameters": [
          {
            "name": "theme",
            "in": "query",
            "description": "light | dark | light-a | dark-a",
            "schema": {
              "type": "string",
              "default": "dark"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/authentication/login": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Login and return access token",
        "operationId": "Authenticate",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UserCredentials"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/authentication/otp": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Send otp for two step verification",
        "operationId": "GetOTP",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UserOTPCredentials"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "deprecated": true
      }
    },
    "/api/authentication/logout": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Logout current user",
        "operationId": "Logout",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/authentication/refresh-token": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Get refresh token on current user",
        "operationId": "RefreshToken",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RefreshTokenRequest"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/authentication/user-info": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Get current user information",
        "description": "available data : Sid, UserName, FullName, NationalCode, Email, Mobile, BourseCode, PersonageType, PasswordExpired, RequireChangePassword, BranchTitle, BourseAccounts, IsMarketer, NickName, IsGuardian, IsUnderGuardian",
        "operationId": "GetUser",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/authentication/active-session": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Get current user active session",
        "description": "result data map : IP, OS, Date",
        "operationId": "GetUserActiveSession",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/authentication/kill-session": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Kill all other session, othrwise current active session",
        "operationId": "KillSession",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/authentication/change-password": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Change user password",
        "operationId": "ChangePassword",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ChangePasswordModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/authentication/forget-password": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Send forget request code to mobile",
        "operationId": "ForgetPassword",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ForgetPasswordModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/authentication/verify-forget": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Verify forget request",
        "operationId": "VerifyForgetPassword",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/VerifyForgetPasswordModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/authentication/2fa/send-otp": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Send otp for change 2 factor authentication",
        "operationId": "SendOtpForChange2fa",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "Sms | Email | App(Authenticator)\n\n0 = None\n\n1 = SMS\n\n2 = Email\n\n3 = App",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/TwoFactorAuthenticationType"
                }
              ],
              "default": 1,
              "x-enumNames": [
                "None",
                "SMS",
                "Email",
                "App"
              ],
              "x-enumDescriptions": [
                "",
                "",
                "",
                ""
              ]
            },
            "x-enumNames": [
              "None",
              "SMS",
              "Email",
              "App"
            ],
            "x-enumDescriptions": [
              "",
              "",
              "",
              ""
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/authentication/2fa/confirm/{otp}/{value}": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Confirm otp for change 2 factor authentication",
        "operationId": "ConfirmOtpForChange2fa",
        "parameters": [
          {
            "name": "otp",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "value",
            "in": "path",
            "description": "true | false",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Sms | Email | App(Authenticator)\n\n0 = None\n\n1 = SMS\n\n2 = Email\n\n3 = App",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/TwoFactorAuthenticationType"
                }
              ],
              "default": 1,
              "x-enumNames": [
                "None",
                "SMS",
                "Email",
                "App"
              ],
              "x-enumDescriptions": [
                "",
                "",
                "",
                ""
              ]
            },
            "x-enumNames": [
              "None",
              "SMS",
              "Email",
              "App"
            ],
            "x-enumDescriptions": [
              "",
              "",
              "",
              ""
            ]
          },
          {
            "name": "alternativeFactor",
            "in": "query",
            "description": "Sms | Email\n\n0 = None\n\n1 = SMS\n\n2 = Email\n\n3 = App",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/TwoFactorAuthenticationType"
                }
              ]
            },
            "x-enumNames": [
              "None",
              "SMS",
              "Email",
              "App"
            ],
            "x-enumDescriptions": [
              "",
              "",
              "",
              ""
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/authentication/change-username": {
      "put": {
        "tags": [
          "Authentication"
        ],
        "summary": "Change user name",
        "operationId": "ChangeUserName",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ChangeUserNameModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/content/news/{id}": {
      "get": {
        "tags": [
          "Content"
        ],
        "summary": "Get news by id",
        "description": "result csv map : Id, Title, Lead, Body, Date, Reference, Tags(Isin, InstrumentName), Url",
        "operationId": "GetNews",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "Content"
        ],
        "summary": "Save viewed news message",
        "operationId": "ViewNews",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/content/news": {
      "get": {
        "tags": [
          "Content"
        ],
        "summary": "Get all news",
        "description": "result csv map : Id, Title, Lead, Body, Date, Reference, Tags(Isin, InstrumentName), Url",
        "operationId": "GetAllNews",
        "parameters": [
          {
            "name": "fromDate",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page Number (default: 1)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page Size (default: 20)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "tags",
            "in": "query",
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/content/codal/{id}": {
      "get": {
        "tags": [
          "Content"
        ],
        "summary": "Get codal by id",
        "description": "result csv map : Id, Subject, Isin, Name, InstrumentName, Date, Url",
        "operationId": "GetCodal",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/content/codal": {
      "get": {
        "tags": [
          "Content"
        ],
        "summary": "Get all Codal",
        "description": "result csv map : Id, Subject, Isin, Name, InstrumentName, Date, Url",
        "operationId": "GetAllCodal",
        "parameters": [
          {
            "name": "fromDate",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page Number (default: 1)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page Size (default: 20)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "tags",
            "in": "query",
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/instrument/search/{seachQuery}": {
      "get": {
        "tags": [
          "Instrument"
        ],
        "summary": "Search instument by name and title",
        "description": "result data map : Isin, Name, Title, LastPrice, LastPricePercent, StateCode, StateTitle, SectorCode, IsActive, HasOtherMarket, TradingSessions, ExchangeTitle",
        "operationId": "Search",
        "parameters": [
          {
            "name": "seachQuery",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "maxLength": 25,
              "minLength": 2,
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "maximum result count",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "json-format",
            "in": "header",
            "description": "Response with full-json | json-csv format",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/instrument/{isin}": {
      "get": {
        "tags": [
          "Instrument"
        ],
        "summary": "Get instrument by isin",
        "description": "result data map : Isin,InstrumentName,InstrumentTitle,InstrumentCode,InstrumentStateCode,InstrumentStateTitle,MinimumOrderQuantity,MaximumOrderQuantity,UpperPriceThreshold,\r\n   LowerPriceThreshold,ClosingPrice,ClosingPricePercent,LastPrice,LastPricePercent,YesterdayPrice,YearHighestTradePrice,YearLowestTradePrice,UpperTradePrice,\r\n   LowestTradePrice,TheoryOpeningPrice,LastTradeDate,BidAsk[AskNumber, AskPrice, AskQuantity, BidNumber, BidPrice, BidQuantity, RowPlace]\r\n   BuyFirmCount, BuyFirmVolume, BuyFirmVolumePercentage, BuyIndividualCount, BuyIndividualVolume, BuyIndividualVolumePercentage, SelFirmCount, SelFirmVolume, SelFirmVolumePercentage,\r\n   SelIndividualCount, SelIndividualVolume, SelIndividualVolumePercentage, TotalNumberOfSharesTraded, TotalNumberOfTrades, TotalTradeValue, BaseVolume,\r\n   SectorCode, ExchangeCode, ExchangeName, InstrumentTypeCode, InstrumentTypeTitle, TsetmcId, FirstTradedPrice, Liquidity, IndexAffect, PE, PEGroup, EPS, LastMonthTurnover, LastThreeMonthesTurnover,\r\n   ClosingPriceVariation, LastPriceVariation, InstrumentMarketValue, TomorrowLowerThreshold, TomorrowUpperThreshold, PriceTick, BuyWage, SellWage, LastWeekTurnover, LastYearTurnover, TradeTick, UnderCautionState,\r\n   GroupCode, GroupStateCode, GroupStateTitle, Nav, NavDate, TradingSessions,\r\n   Option[UnderlyingAssetIsin,UnderlyingAssetName, UnderlyingAssetPrice,Type,Size,OpenInterest,StrikePrice,ExpirationDate,TimeToExpiration,InitialMargin,RequiredMargin,Moneyness,IntrinsicValue,TimeValue,NotionalValue,TradeValue,\r\n          BS,IV,Delta,Gamma,Theta,Vega,Rho,Leverage,AskPrice,AskQuantity,BidPrice,BidQuantity,Volatility,OpenPosition],\r\n   ExpirationDate, TimeToExpiration",
        "operationId": "Get",
        "parameters": [
          {
            "name": "isin",
            "in": "path",
            "description": "exam: IRO1FOLD0001, IRT3OFRF0001, IRO1PMSZ0001, IRO3HRLZ0001 ,IRO1IKCO0001 ,IRO1NPRS0001 ,IRO3GOMZ0001",
            "required": true,
            "schema": {
              "maxLength": 12,
              "minLength": 12,
              "type": "string"
            }
          },
          {
            "name": "json-format",
            "in": "header",
            "description": "Response with full-json | json-csv format",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/instrument/{keyword}/{value}": {
      "get": {
        "tags": [
          "Instrument"
        ],
        "summary": "Get instrument by isin | name",
        "description": "result data map : Isin,InstrumentName,InstrumentTitle,InstrumentStateCode,InstrumentStateTitle,MinimumOrderQuantity,MaximumOrderQuantity,UpperPriceThreshold,LowerPriceThreshold,ClosingPrice,\r\nClosingPriceVariation,ClosingPricePercent,LastPrice,LastPriceVariation,LastPricePercent,YesterdayPrice,UpperTradePrice,LowestTradePrice,LastTradeDate,IndustryId,ExchangeCode,\r\nExchangeName,InstrumentTypeCode,InstrumentTypeTitle,GroupCode,GroupStateCode,GroupStateTitle,PriceTick,TradeTick,BuyWage,SellWage",
        "operationId": "GetByKeyword",
        "parameters": [
          {
            "name": "keyword",
            "in": "path",
            "description": "isin | name",
            "required": true,
            "schema": {
              "pattern": "^isin|^name$",
              "type": "string"
            }
          },
          {
            "name": "value",
            "in": "path",
            "description": "isin(IRO1FOLD0001, IRO1PMSZ0001, IRO3HRLZ0001) | name(فولاد, فملی, وبملت)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "json-format",
            "in": "header",
            "description": "Response with full-json | json-csv format",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/instrument/{isin}/caution-state": {
      "get": {
        "tags": [
          "Instrument"
        ],
        "summary": "Get caution state",
        "description": "result csv map : State, Reason, DateOfEvent",
        "operationId": "GetCautionState",
        "parameters": [
          {
            "name": "isin",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "maxLength": 12,
              "minLength": 12,
              "type": "string"
            }
          },
          {
            "name": "json-format",
            "in": "header",
            "description": "Response with full-json | json-csv format",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/instrument/{isin}/depth/{orderSide}": {
      "get": {
        "tags": [
          "Instrument"
        ],
        "summary": "Get instrument depth records",
        "description": "result data map : Number, Price, Quantity",
        "operationId": "GetInstrumentDepth",
        "parameters": [
          {
            "name": "isin",
            "in": "path",
            "description": "instrument identification",
            "required": true,
            "schema": {
              "maxLength": 12,
              "minLength": 12,
              "type": "string"
            }
          },
          {
            "name": "orderSide",
            "in": "path",
            "description": "1:buy | 2:sell",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "level",
            "in": "query",
            "description": "null value return all levels",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "json-format",
            "in": "header",
            "description": "Response with full-json | json-csv format",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/instrument/{isin}/trade": {
      "get": {
        "tags": [
          "Instrument"
        ],
        "summary": "Get instrument trade detail",
        "description": "result data map : Time, TradeNumber, Price, Volume",
        "operationId": "GetInstrumentTradeDetail",
        "parameters": [
          {
            "name": "isin",
            "in": "path",
            "description": "instrument identification",
            "required": true,
            "schema": {
              "maxLength": 12,
              "minLength": 12,
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "json-format",
            "in": "header",
            "description": "Response with full-json | json-csv format",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/instrument/{isin}/chart-data/{timeframe}": {
      "get": {
        "tags": [
          "Instrument"
        ],
        "summary": "Get chart ohlc data",
        "description": "Result data map : {open, high, low, close, volume, time}",
        "operationId": "GetData",
        "parameters": [
          {
            "name": "isin",
            "in": "path",
            "description": "instrument identification of symbol exam: IRO1PMSZ0001, adjustment exam: IRO1PMSZ0001-1",
            "required": true,
            "schema": {
              "maxLength": 14,
              "minLength": 12,
              "type": "string"
            }
          },
          {
            "name": "timeframe",
            "in": "path",
            "description": "1|5|30|60|1d|1w|1m",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "records",
            "in": "query",
            "description": "count of bar to retrive",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "start date: 1618083000000",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 0
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "end date: 1624271000000",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 0
            }
          },
          {
            "name": "json-format",
            "in": "header",
            "description": "Response with full-json | json-csv format",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/instrument/{isin}/chart-mark/{timeframe}": {
      "get": {
        "tags": [
          "Instrument"
        ],
        "summary": "Get chart data mark PriceAdjustment/ShareChange",
        "description": "Result data map : Data, Color, Comment",
        "operationId": "GetDataMark",
        "parameters": [
          {
            "name": "isin",
            "in": "path",
            "description": "instrument identification of symbol exam: IRO1PMSZ0001, adjustment exam: IRO1PMSZ0001-1",
            "required": true,
            "schema": {
              "maxLength": 12,
              "minLength": 12,
              "type": "string"
            }
          },
          {
            "name": "timeframe",
            "in": "path",
            "description": "1|5|30|60|1d|1w|1m",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "start date: 1618083000000",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 0
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "end date: 1624271000000",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 0
            }
          },
          {
            "name": "json-format",
            "in": "header",
            "description": "Response with full-json | json-csv format",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/instrument/industry/{industryId}": {
      "get": {
        "tags": [
          "Instrument"
        ],
        "summary": "Get Industry instrument(symbol)",
        "description": "result data map : Isin, Name, Title, LastPrice, LastPricePercent, StateCode, StateTitle, IsActive, HasOtherMarket, TradingSessions",
        "operationId": "GetByIndustry",
        "parameters": [
          {
            "name": "industryId",
            "in": "path",
            "description": "sector code or industry id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1000
            }
          },
          {
            "name": "json-format",
            "in": "header",
            "description": "Response with full-json | json-csv format",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/instrument/same-group/{industryId}": {
      "get": {
        "tags": [
          "Instrument"
        ],
        "summary": "Get Instrument same group",
        "description": "result data map : Isin,InstrumentName,InstrumentTitle,InstrumentCode,InstrumentStateCode,InstrumentStateTitle,MinimumOrderQuantity,MaximumOrderQuantity,UpperPriceThreshold,LowerPriceThreshold,ClosingPrice,ClosingPriceVariation,ClosingPricePercent,\r\nLastPrice,LastPriceVariation,LastPricePercent,YesterdayPrice,YearHighestTradePrice,YearLowestTradePrice,UpperTradePrice,LowestTradePrice,TheoryOpeningPrice,LastTradeDate,AskPrice,AskQuantity,AskNumber,BidPrice,BidQuantity,BidNumber,BuyFirmCount,BuyFirmVolume,BuyFirmVolumePercentage,BuyIndividualCount,BuyIndividualVolume,BuyIndividualVolumePercentage,SelFirmCount,SelFirmVolume,SelFirmVolumePercentage,SelIndividualCount,SelIndividualVolume,SelIndividualVolumePercentage,BuyDensity,SellDensity,InputMony,TotalNumberOfSharesTraded,TotalNumberOfTrades,TotalTradeValue,BaseVolume,\r\nExchangeName,ExchangeCode,InstrumentTypeCode,InstrumentTypeTitle,TsetmcId,FirstTradedPrice,Liquidity,IndexAffect,PE,PEGroup,EPS,LastMonthTurnover,LastThreeMonthesTurnover,InstrumentMarketValue",
        "operationId": "GetSameGroup",
        "parameters": [
          {
            "name": "industryId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1000
            }
          },
          {
            "name": "json-format",
            "in": "header",
            "description": "Response with full-json | json-csv format",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/instrument/note": {
      "get": {
        "tags": [
          "Instrument"
        ],
        "summary": "Get All Note",
        "description": "csv result map : Isin, InstrumentName, Title, Note, Color, EntryDate",
        "operationId": "GetAllNote",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page Number (default: 1)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page Size (default: 20)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "json-format",
            "in": "header",
            "description": "Response with full-json | json-csv format",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "Instrument"
        ],
        "summary": "Add symbol note",
        "operationId": "AddNote",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PostNoteModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "Instrument"
        ],
        "summary": "Update symbol note",
        "operationId": "UpdateUserNote",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PostNoteModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/instrument/{isin}/note": {
      "get": {
        "tags": [
          "Instrument"
        ],
        "summary": "Get note",
        "description": "csv result map : Isin, InstrumentName, Title, Note, Color, EntryDate",
        "operationId": "GetNote",
        "parameters": [
          {
            "name": "isin",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "maxLength": 12,
              "minLength": 12,
              "type": "string"
            }
          },
          {
            "name": "json-format",
            "in": "header",
            "description": "Response with full-json | json-csv format",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "Instrument"
        ],
        "summary": "Delete symbol note",
        "operationId": "DeleteNote",
        "parameters": [
          {
            "name": "isin",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "maxLength": 12,
              "minLength": 12,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/instrument/ipo": {
      "get": {
        "tags": [
          "Instrument"
        ],
        "summary": "Get active ipo/underwriting instrument list",
        "description": "result csv map : Isin, InstrumentName, InstrumentTitle, MaxPrice, MinPrice, MaxQuantity, MinQuantity, IpoDate, StartTime, EndTime, BuyWage, OfferingType, Note, Hybrid",
        "operationId": "IpoRelease",
        "parameters": [
          {
            "name": "json-format",
            "in": "header",
            "description": "Response with full-json | json-csv format",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/instrument/underlying-asset": {
      "get": {
        "tags": [
          "Instrument"
        ],
        "summary": "Get underlying asset",
        "description": "result csv map : Isin, InstrumentName, InstrumentTitle, InstrumentStateCode, InstrumentStateTitle, HasExpiring, HasStarting",
        "operationId": "UnderlyingAsset",
        "parameters": [
          {
            "name": "json-format",
            "in": "header",
            "description": "Response with full-json | json-csv format",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/instrument/underlying-asset/{isin}/info/{expirationDate}": {
      "get": {
        "tags": [
          "Instrument"
        ],
        "summary": "Get underlying asset information",
        "description": "result csv map : MinPosition,MaxPosition,SumMaxPosition,SumOfPosition,RemainPosition,Locked",
        "operationId": "UnderlyingAssetInfo",
        "parameters": [
          {
            "name": "isin",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expirationDate",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "json-format",
            "in": "header",
            "description": "Response with full-json | json-csv format",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/instrument/{isin}/option-chain": {
      "get": {
        "tags": [
          "Instrument"
        ],
        "summary": "Get option chain contract",
        "description": "result data map : Isin,InstrumentName,InstrumentTitle,InstrumentCode,InstrumentStateCode,InstrumentStateTitle,MinimumOrderQuantity,MaximumOrderQuantity,UpperPriceThreshold,\r\n   LowerPriceThreshold,ClosingPrice,ClosingPricePercent,LastPrice,LastPricePercent,YesterdayPrice,YearHighestTradePrice,YearLowestTradePrice,UpperTradePrice,\r\n   LowestTradePrice,TheoryOpeningPrice,LastTradeDate,BidAsk[AskNumber, AskPrice, AskQuantity, BidNumber, BidPrice, BidQuantity, RowPlace]\r\n   BuyFirmCount, BuyFirmVolume, BuyFirmVolumePercentage, BuyIndividualCount, BuyIndividualVolume, BuyIndividualVolumePercentage, SelFirmCount, SelFirmVolume, SelFirmVolumePercentage,\r\n   SelIndividualCount, SelIndividualVolume, SelIndividualVolumePercentage, TotalNumberOfSharesTraded, TotalNumberOfTrades, TotalTradeValue, BaseVolume,\r\n   SectorCode, ExchangeCode, ExchangeName, InstrumentTypeCode, InstrumentTypeTitle, TsetmcId, FirstTradedPrice, Liquidity, IndexAffect, PE, PEGroup, EPS, LastMonthTurnover, LastThreeMonthesTurnover,\r\n   ClosingPriceVariation, LastPriceVariation, InstrumentMarketValue, TomorrowLowerThreshold, TomorrowUpperThreshold, PriceTick, BuyWage, SellWage, LastWeekTurnover, LastYearTurnover, TradeTick, UnderCautionState,\r\n   GroupCode, GroupStateCode, GroupStateTitle, Nav, NavDate, TradingSessions,\r\n   Option[UnderlyingAssetIsin,UnderlyingAssetName, UnderlyingAssetPrice,Type,Size,OpenInterest,StrikePrice,ExpirationDate,TimeToExpiration,InitialMargin,RequiredMargin,Moneyness,IntrinsicValue,TimeValue,NotionalValue,TradeValue,\r\n          BS,IV,Delta,Gamma,Theta,Vega,Rho,Leverage,AskPrice,AskQuantity,BidPrice,BidQuantity,Volatility,OpenPosition],\r\n   ExpirationDate, TimeToExpiration",
        "operationId": "OptionChain",
        "parameters": [
          {
            "name": "isin",
            "in": "path",
            "description": "underlying asset isin",
            "required": true,
            "schema": {
              "maxLength": 12,
              "minLength": 12,
              "type": "string"
            }
          },
          {
            "name": "json-format",
            "in": "header",
            "description": "Response with full-json | json-csv format",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/instrument/{isin}/option-value": {
      "get": {
        "tags": [
          "Instrument"
        ],
        "summary": "Calc option risk coverage ratios as in BlackSholes, ImpliedVolatility, Delta, Gamma, Theta, Vega, Rho",
        "description": "result data map : BlackSholes(BS),ImpliedVolatility(IV),Delta,Gamma,Theta,Vega,Rho",
        "operationId": "OptionValue",
        "parameters": [
          {
            "name": "isin",
            "in": "path",
            "description": "option instument isin",
            "required": true,
            "schema": {
              "maxLength": 12,
              "minLength": 12,
              "type": "string"
            }
          },
          {
            "name": "underlyingAssetClosingPrice",
            "in": "query",
            "description": "underlying asset closing price",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "lastPrice",
            "in": "query",
            "description": "last price, for calulate implied volatility",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "strikePrice",
            "in": "query",
            "description": "strike price",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "riskFreeRate",
            "in": "query",
            "description": "risk free rate 0..100",
            "schema": {
              "type": "number",
              "format": "double",
              "default": 30
            }
          },
          {
            "name": "dividendYield",
            "in": "query",
            "description": "dividend yield 0..100",
            "schema": {
              "type": "number",
              "format": "double",
              "default": 10
            }
          },
          {
            "name": "volatility",
            "in": "query",
            "description": "historical volatility",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "timeToExpiration",
            "in": "query",
            "description": "time to expiration, n > 0",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "json-format",
            "in": "header",
            "description": "Response with full-json | json-csv format",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/market/trading-session": {
      "get": {
        "tags": [
          "Market"
        ],
        "summary": "Get all trading sessions",
        "description": "result data map : Title, Value[State, Start-End:ActiveDayOfWeek]\r\n\n DayOfWeek : 1-Sun,2-Mon,3-Tue,4-Wed,5-Thu,6-Fri,7-Sat",
        "operationId": "GetTradingSessions",
        "parameters": [
          {
            "name": "json-format",
            "in": "header",
            "description": "Response with full-json | json-csv format",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/market/holiday": {
      "get": {
        "tags": [
          "Market"
        ],
        "summary": "Get all trading sessions",
        "description": "result data map : Date, Title",
        "operationId": "GetTradingHolidays",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "default: start of current month",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "default: end of current month",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "json-format",
            "in": "header",
            "description": "Response with full-json | json-csv format",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/market/industry": {
      "get": {
        "tags": [
          "Market"
        ],
        "summary": "Get all industry",
        "description": "result data map : Code, Title",
        "operationId": "GetIndustry",
        "parameters": [
          {
            "name": "fullIndustry",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "json-format",
            "in": "header",
            "description": "Response with full-json | json-csv format",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/market/index": {
      "get": {
        "tags": [
          "Market"
        ],
        "summary": "Get Market Index",
        "description": "result data map : Code, Title, Value, Change, Percent",
        "operationId": "MarketIndex",
        "parameters": [
          {
            "name": "json-format",
            "in": "header",
            "description": "Response with full-json | json-csv format",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/market/time": {
      "get": {
        "tags": [
          "Market"
        ],
        "summary": "Get market time",
        "operationId": "MarketTime",
        "parameters": [
          {
            "name": "json-format",
            "in": "header",
            "description": "Response with full-json | json-csv format",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/market/time-calendar": {
      "get": {
        "tags": [
          "Market"
        ],
        "summary": "Get market time and calndar time sheet",
        "operationId": "MarketTimeCalendar",
        "parameters": [
          {
            "name": "json-format",
            "in": "header",
            "description": "Response with full-json | json-csv format",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "deprecated": true
      }
    },
    "/api/market/index-chart-data/{indexDataType}/{timeFrame}": {
      "get": {
        "tags": [
          "Market"
        ],
        "summary": "Get total index chart data",
        "description": "result csv map : Date, Value",
        "operationId": "GetTotalIndexChartData",
        "parameters": [
          {
            "name": "indexDataType",
            "in": "path",
            "description": "\n\n1 = Number\n\n2 = Quantity\n\n3 = Volume\n\n4 = Value",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/IndexDataType"
                }
              ],
              "x-enumNames": [
                "Number",
                "Quantity",
                "Volume",
                "Value"
              ],
              "x-enumDescriptions": [
                "",
                "",
                "",
                ""
              ]
            },
            "x-enumNames": [
              "Number",
              "Quantity",
              "Volume",
              "Value"
            ],
            "x-enumDescriptions": [
              "",
              "",
              "",
              ""
            ]
          },
          {
            "name": "timeframe",
            "in": "path",
            "description": "1d|1w|1m|3m|6m|1y|ytd",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "records",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 22
            }
          },
          {
            "name": "json-format",
            "in": "header",
            "description": "Response with full-json | json-csv format",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/market/instrument/{directionType}/money/{customerType}": {
      "get": {
        "tags": [
          "Market"
        ],
        "summary": "Get maximum instrument input/output money on individual/firm",
        "description": "result csv map : Name, Value",
        "operationId": "GetInstrumentInputOutputMoney",
        "parameters": [
          {
            "name": "directionType",
            "in": "path",
            "description": "\n\n1 = Input\n\n2 = Output",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/DirectionType"
                }
              ],
              "x-enumNames": [
                "Input",
                "Output"
              ],
              "x-enumDescriptions": [
                "",
                ""
              ]
            },
            "x-enumNames": [
              "Input",
              "Output"
            ],
            "x-enumDescriptions": [
              "",
              ""
            ]
          },
          {
            "name": "customerType",
            "in": "path",
            "description": "\n\n1 = Individual (An Individual (حقیقی))\n\n2 = Firm (A Firm (حقوقی))",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/CustomerType"
                }
              ],
              "x-enumNames": [
                "Individual",
                "Firm"
              ],
              "x-enumDescriptions": [
                "An Individual (حقیقی)",
                "A Firm (حقوقی)"
              ]
            },
            "x-enumNames": [
              "Individual",
              "Firm"
            ],
            "x-enumDescriptions": [
              "An Individual (حقیقی)",
              "A Firm (حقوقی)"
            ]
          },
          {
            "name": "count",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "json-format",
            "in": "header",
            "description": "Response with full-json | json-csv format",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/market/industry/{directionType}/money/{customerType}": {
      "get": {
        "tags": [
          "Market"
        ],
        "summary": "Get maximum industry input/output money on individual/firm",
        "description": "result csv map : Name, Value",
        "operationId": "GetIndustryInputOutputMoney",
        "parameters": [
          {
            "name": "directionType",
            "in": "path",
            "description": "\n\n1 = Input\n\n2 = Output",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/DirectionType"
                }
              ],
              "x-enumNames": [
                "Input",
                "Output"
              ],
              "x-enumDescriptions": [
                "",
                ""
              ]
            },
            "x-enumNames": [
              "Input",
              "Output"
            ],
            "x-enumDescriptions": [
              "",
              ""
            ]
          },
          {
            "name": "customerType",
            "in": "path",
            "description": "\n\n1 = Individual (An Individual (حقیقی))\n\n2 = Firm (A Firm (حقوقی))",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/CustomerType"
                }
              ],
              "x-enumNames": [
                "Individual",
                "Firm"
              ],
              "x-enumDescriptions": [
                "An Individual (حقیقی)",
                "A Firm (حقوقی)"
              ]
            },
            "x-enumNames": [
              "Individual",
              "Firm"
            ],
            "x-enumDescriptions": [
              "An Individual (حقیقی)",
              "A Firm (حقوقی)"
            ]
          },
          {
            "name": "count",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "json-format",
            "in": "header",
            "description": "Response with full-json | json-csv format",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/market/closing-price/{priceType}": {
      "get": {
        "tags": [
          "Market"
        ],
        "summary": "Get Top or Bottom closing prices",
        "description": "data map: Isin, InstrumentName, InstrumentTitle, lastPrice, lastPricePercent",
        "operationId": "GetClosingPrices",
        "parameters": [
          {
            "name": "priceType",
            "in": "path",
            "description": "\n\n1 = Top (The Top closing (پر سود ترین))\n\n2 = Bottom (The bottom closing (ضررده ترین))",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/PriceMode"
                }
              ],
              "x-enumNames": [
                "Top",
                "Bottom"
              ],
              "x-enumDescriptions": [
                "The Top closing (پر سود ترین)",
                "The bottom closing (ضررده ترین)"
              ]
            },
            "x-enumNames": [
              "Top",
              "Bottom"
            ],
            "x-enumDescriptions": [
              "The Top closing (پر سود ترین)",
              "The bottom closing (ضررده ترین)"
            ]
          },
          {
            "name": "count",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "json-format",
            "in": "header",
            "description": "Response with full-json | json-csv format",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/market/impact/{marketType}": {
      "get": {
        "tags": [
          "Market"
        ],
        "summary": "Get impact on different markets",
        "description": "Isin, InstrumentName, InstrumentTitle, LastPrice, LastPricePercent, Rate, Impact",
        "operationId": "GetImpact",
        "parameters": [
          {
            "name": "marketType",
            "in": "path",
            "description": "\n\n1 = Bourse (Bourse (بورس))\n\n2 = FaraBourse (FaraBourse (فرابورس))",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ViewMarketType"
                }
              ],
              "x-enumNames": [
                "Bourse",
                "FaraBourse"
              ],
              "x-enumDescriptions": [
                "Bourse (بورس)",
                "FaraBourse (فرابورس)"
              ]
            },
            "x-enumNames": [
              "Bourse",
              "FaraBourse"
            ],
            "x-enumDescriptions": [
              "Bourse (بورس)",
              "FaraBourse (فرابورس)"
            ]
          },
          {
            "name": "count",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "json-format",
            "in": "header",
            "description": "Response with full-json | json-csv format",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/market/max-trade/{marketSort}": {
      "get": {
        "tags": [
          "Market"
        ],
        "summary": "Get the max trades of market with different sorts",
        "description": "data map: Isin, InstrumantName, InstrumentTitle, LastPrice, LastPricePercent, Value",
        "operationId": "GetMaxTrades",
        "parameters": [
          {
            "name": "marketSort",
            "in": "path",
            "description": "\n\n1 = Value (The Value (ارزش))\n\n2 = Volume (The Volume (حجم))\n\n3 = Visit (The Amount of Visits (بازدید))",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/MarketSort"
                }
              ],
              "x-enumNames": [
                "Value",
                "Volume",
                "Visit"
              ],
              "x-enumDescriptions": [
                "The Value (ارزش)",
                "The Volume (حجم)",
                "The Amount of Visits (بازدید)"
              ]
            },
            "x-enumNames": [
              "Value",
              "Volume",
              "Visit"
            ],
            "x-enumDescriptions": [
              "The Value (ارزش)",
              "The Volume (حجم)",
              "The Amount of Visits (بازدید)"
            ]
          },
          {
            "name": "count",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "json-format",
            "in": "header",
            "description": "Response with full-json | json-csv format",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/market/indi-firm-month": {
      "get": {
        "tags": [
          "Market"
        ],
        "summary": "Get inididual/firm data in month",
        "description": "result csv map : Date, FirmVolume, FirmVolumePercentage, IndVolume, IndVolumePercentage",
        "operationId": "GetIndiFirmInMonth",
        "parameters": [
          {
            "name": "lastDays",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "json-format",
            "in": "header",
            "description": "Response with full-json | json-csv format",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/market/map": {
      "get": {
        "tags": [
          "Market"
        ],
        "summary": "Get the market map",
        "description": "data map: mapsort, [ Isin, Date, InstrumentName, InstrumentTitle, Industry, SymbolType, MarketType, TimeFrame, LastPrice, ClosingPrice, MarketValue, TradeValue, TradeVolume,\r\n BuyFirmCount, BuyFirmVolume, BuyFirmVolumePercent, BuyIndividualCount, BuyIndividualVolume, BuyIndividualVolumePercent,\r\n SellFirmCount, SellFirmVolume, SellFirmVolumePercent, SellIndividualCount, SellIndividualVolume, SellIndividualVolumePercent, ClosingPercent, LastPercent ]",
        "operationId": "GetMarketMap",
        "parameters": [
          {
            "name": "symbolTypes",
            "in": "query",
            "description": "\n\n0 = None\n\n1 = SH (سهام)\n\n2 = FUN (صندوق سهامی)\n\n3 = FUNMIX (صندوق مختلط)\n\n4 = FUNFIX (صندوق ثابت)\n\n5 = FUNBUL (صندوق زمین و ساختمان)\n\n6 = FUNBOLD (صندوق جسورانه)\n\n7 = WAR (حق تقدم)\n\n8 = OPT (اختیار معامله)\n\n9 = SELLOPT (اختیار تبعی)\n\n10 = BON (اوراق قرضه)\n\n11 = DEP (گواهی سپرده سرمایه گذاری)\n\n12 = FUT (آتی)\n\n13 = BFUT (آتی سبد)\n\n14 = SHBASE (بازار پایه)\n\n15 = BONWARBLD (اوراق حق تقدم استفاده از تسهیلات مسکن)\n\n16 = IPR (دارایی فکری)\n\n17 = SALAF (اوراق سلف موازی استاندارد)\n\n18 = METPET (کالا محصولات فلزی و پتروشیمی)\n\n19 = CORPS (کالا محصولات کشاورزی)\n\n20 = IMPROP (کالا اموال غیرمنقول در بازار فرعی)\n\n21 = MDEP (گواهی سپرده کالایی)\n\n22 = MDEPGC (گواهی سپرده کالایی سکه طلا)\n\n23 = ENGMER (معاملات کالاها)\n\n24 = SALAFPHZPOW (انرژی  سلف موازی; فیزیکی - برقا)\n\n25 = PRJFUND (انرژی  صندوق های پروژه)\n\n26 = CapCert (انرژی  اوراق گواهی ظرفیت)\n\n27 = FUNDINFUND (صندوق در صندوق)\n\n28 = FUNDPRIVATE (صندوق شخصی)\n\n29 = RELES (.املاك ومستغلات)\n\n30 = MDEPDIS (گواهی سپرده کالایی ناپیوسته)",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/InstrumentType"
              }
            }
          },
          {
            "name": "marketTypes",
            "in": "query",
            "description": "\n\n0 = None\n\n1 = TSE (بورس)\n\n2 = OTC (فرابورس)\n\n3 = IME (بورس کالا)\n\n4 = IRENEX (بورس انرژی)",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ExchangeType"
              }
            }
          },
          {
            "name": "category",
            "in": "query",
            "description": "industry id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "timeFrame",
            "in": "query",
            "description": "\n\n1 = Day (روز)\n\n2 = Week (هفته)\n\n3 = Month (ماه)",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/MapTimeFrame"
                }
              ],
              "default": 1,
              "x-enumNames": [
                "Day",
                "Week",
                "Month"
              ],
              "x-enumDescriptions": [
                "روز",
                "هفته",
                "ماه"
              ]
            },
            "x-enumNames": [
              "Day",
              "Week",
              "Month"
            ],
            "x-enumDescriptions": [
              "روز",
              "هفته",
              "ماه"
            ]
          },
          {
            "name": "mapSort",
            "in": "query",
            "description": "\n\n0 = NoSort (بدون دسته بندی)\n\n1 = StockType (نوع سهام)\n\n2 = ExchangeType (نوع بازار)\n\n3 = TradeVolume (حجم معاملات حقیقی و حقوقی)\n\n4 = PriceChange (تغییر قیمت)\n\n5 = IndustryGroup (گروه های صنعت)\n\n6 = IndustrySubGroups (زیر گروه های صنعت)",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/MapSort"
                }
              ],
              "default": 5,
              "x-enumNames": [
                "NoSort",
                "StockType",
                "ExchangeType",
                "TradeVolume",
                "PriceChange",
                "IndustryGroup",
                "IndustrySubGroups"
              ],
              "x-enumDescriptions": [
                "بدون دسته بندی",
                "نوع سهام",
                "نوع بازار",
                "حجم معاملات حقیقی و حقوقی",
                "تغییر قیمت",
                "گروه های صنعت",
                "زیر گروه های صنعت"
              ]
            },
            "x-enumNames": [
              "NoSort",
              "StockType",
              "ExchangeType",
              "TradeVolume",
              "PriceChange",
              "IndustryGroup",
              "IndustrySubGroups"
            ],
            "x-enumDescriptions": [
              "بدون دسته بندی",
              "نوع سهام",
              "نوع بازار",
              "حجم معاملات حقیقی و حقوقی",
              "تغییر قیمت",
              "گروه های صنعت",
              "زیر گروه های صنعت"
            ]
          },
          {
            "name": "json-format",
            "in": "header",
            "description": "Response with full-json | json-csv format",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/market/map/{exportType}": {
      "get": {
        "tags": [
          "Market"
        ],
        "summary": "Export market map to csv, excel, xml",
        "operationId": "ExportMarketMap",
        "parameters": [
          {
            "name": "exportType",
            "in": "path",
            "description": "csv|excel|xml",
            "required": true,
            "schema": {
              "pattern": "^csv$|^excel$|^xml$",
              "type": "string"
            }
          },
          {
            "name": "symbolTypes",
            "in": "query",
            "description": "\n\n0 = None\n\n1 = SH (سهام)\n\n2 = FUN (صندوق سهامی)\n\n3 = FUNMIX (صندوق مختلط)\n\n4 = FUNFIX (صندوق ثابت)\n\n5 = FUNBUL (صندوق زمین و ساختمان)\n\n6 = FUNBOLD (صندوق جسورانه)\n\n7 = WAR (حق تقدم)\n\n8 = OPT (اختیار معامله)\n\n9 = SELLOPT (اختیار تبعی)\n\n10 = BON (اوراق قرضه)\n\n11 = DEP (گواهی سپرده سرمایه گذاری)\n\n12 = FUT (آتی)\n\n13 = BFUT (آتی سبد)\n\n14 = SHBASE (بازار پایه)\n\n15 = BONWARBLD (اوراق حق تقدم استفاده از تسهیلات مسکن)\n\n16 = IPR (دارایی فکری)\n\n17 = SALAF (اوراق سلف موازی استاندارد)\n\n18 = METPET (کالا محصولات فلزی و پتروشیمی)\n\n19 = CORPS (کالا محصولات کشاورزی)\n\n20 = IMPROP (کالا اموال غیرمنقول در بازار فرعی)\n\n21 = MDEP (گواهی سپرده کالایی)\n\n22 = MDEPGC (گواهی سپرده کالایی سکه طلا)\n\n23 = ENGMER (معاملات کالاها)\n\n24 = SALAFPHZPOW (انرژی  سلف موازی; فیزیکی - برقا)\n\n25 = PRJFUND (انرژی  صندوق های پروژه)\n\n26 = CapCert (انرژی  اوراق گواهی ظرفیت)\n\n27 = FUNDINFUND (صندوق در صندوق)\n\n28 = FUNDPRIVATE (صندوق شخصی)\n\n29 = RELES (.املاك ومستغلات)\n\n30 = MDEPDIS (گواهی سپرده کالایی ناپیوسته)",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/InstrumentType"
              }
            }
          },
          {
            "name": "marketTypes",
            "in": "query",
            "description": "\n\n0 = None\n\n1 = TSE (بورس)\n\n2 = OTC (فرابورس)\n\n3 = IME (بورس کالا)\n\n4 = IRENEX (بورس انرژی)",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ExchangeType"
              }
            }
          },
          {
            "name": "category",
            "in": "query",
            "description": "industry id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "timeFrame",
            "in": "query",
            "description": "\n\n1 = Day (روز)\n\n2 = Week (هفته)\n\n3 = Month (ماه)",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/MapTimeFrame"
                }
              ],
              "default": 1,
              "x-enumNames": [
                "Day",
                "Week",
                "Month"
              ],
              "x-enumDescriptions": [
                "روز",
                "هفته",
                "ماه"
              ]
            },
            "x-enumNames": [
              "Day",
              "Week",
              "Month"
            ],
            "x-enumDescriptions": [
              "روز",
              "هفته",
              "ماه"
            ]
          },
          {
            "name": "mapSort",
            "in": "query",
            "description": "\n\n0 = NoSort (بدون دسته بندی)\n\n1 = StockType (نوع سهام)\n\n2 = ExchangeType (نوع بازار)\n\n3 = TradeVolume (حجم معاملات حقیقی و حقوقی)\n\n4 = PriceChange (تغییر قیمت)\n\n5 = IndustryGroup (گروه های صنعت)\n\n6 = IndustrySubGroups (زیر گروه های صنعت)",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/MapSort"
                }
              ],
              "default": 5,
              "x-enumNames": [
                "NoSort",
                "StockType",
                "ExchangeType",
                "TradeVolume",
                "PriceChange",
                "IndustryGroup",
                "IndustrySubGroups"
              ],
              "x-enumDescriptions": [
                "بدون دسته بندی",
                "نوع سهام",
                "نوع بازار",
                "حجم معاملات حقیقی و حقوقی",
                "تغییر قیمت",
                "گروه های صنعت",
                "زیر گروه های صنعت"
              ]
            },
            "x-enumNames": [
              "NoSort",
              "StockType",
              "ExchangeType",
              "TradeVolume",
              "PriceChange",
              "IndustryGroup",
              "IndustrySubGroups"
            ],
            "x-enumDescriptions": [
              "بدون دسته بندی",
              "نوع سهام",
              "نوع بازار",
              "حجم معاملات حقیقی و حقوقی",
              "تغییر قیمت",
              "گروه های صنعت",
              "زیر گروه های صنعت"
            ]
          },
          {
            "name": "json-format",
            "in": "header",
            "description": "Response with full-json | json-csv format",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/market/industry-map": {
      "get": {
        "tags": [
          "Market"
        ],
        "summary": "Get only industry map",
        "description": "data map: IndustryName, MarketValue, TradeValue, TradeVolume, Percent",
        "operationId": "GetIndustryMap",
        "parameters": [
          {
            "name": "json-format",
            "in": "header",
            "description": "Response with full-json | json-csv format",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/market/watch": {
      "get": {
        "tags": [
          "Market"
        ],
        "summary": "Get market watch",
        "description": "result data map : Isin,InstrumentName,InstrumentTitle,InstrumentCode,InstrumentStateCode,InstrumentStateTitle,MinimumOrderQuantity,MaximumOrderQuantity,UpperPriceThreshold,LowerPriceThreshold,ClosingPrice,ClosingPriceVariation,ClosingPricePercent,\r\nLastPrice,LastPriceVariation,LastPricePercent,YesterdayPrice,YearHighestTradePrice,YearLowestTradePrice,UpperTradePrice,LowestTradePrice,TheoryOpeningPrice,LastTradeDate,AskPrice,AskQuantity,AskNumber,BidPrice,BidQuantity,BidNumber,BuyFirmCount,BuyFirmVolume,BuyFirmVolumePercentage,BuyIndividualCount,BuyIndividualVolume,BuyIndividualVolumePercentage,SelFirmCount,SelFirmVolume,SelFirmVolumePercentage,SelIndividualCount,SelIndividualVolume,SelIndividualVolumePercentage,BuyDensity,SellDensity,InputMony,TotalNumberOfSharesTraded,TotalNumberOfTrades,TotalTradeValue,BaseVolume,\r\nExchangeCode,ExchangeName,InstrumentTypeCode,InstrumentTypeTitle,TsetmcId,FirstTradedPrice,Liquidity,IndexAffect,PE,PEGroup,EPS,LastMonthTurnover,LastThreeMonthesTurnover,InstrumentMarketValue,UnderCautionState,NAV,MarketTypeCode,MarketTypeTitle,SymbolQueueState",
        "operationId": "GetMarketWatch",
        "parameters": [
          {
            "name": "symbolQuery",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "exchange",
            "in": "query",
            "description": "\n\n0 = None\n\n1 = TSE (بورس)\n\n2 = OTC (فرابورس)\n\n3 = IME (بورس کالا)\n\n4 = IRENEX (بورس انرژی)",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ExchangeType"
              }
            }
          },
          {
            "name": "industry",
            "in": "query",
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "instrumentType",
            "in": "query",
            "description": "\n\n0 = None\n\n1 = SH (سهام)\n\n2 = FUN (صندوق سهامی)\n\n3 = FUNMIX (صندوق مختلط)\n\n4 = FUNFIX (صندوق ثابت)\n\n5 = FUNBUL (صندوق زمین و ساختمان)\n\n6 = FUNBOLD (صندوق جسورانه)\n\n7 = WAR (حق تقدم)\n\n8 = OPT (اختیار معامله)\n\n9 = SELLOPT (اختیار تبعی)\n\n10 = BON (اوراق قرضه)\n\n11 = DEP (گواهی سپرده سرمایه گذاری)\n\n12 = FUT (آتی)\n\n13 = BFUT (آتی سبد)\n\n14 = SHBASE (بازار پایه)\n\n15 = BONWARBLD (اوراق حق تقدم استفاده از تسهیلات مسکن)\n\n16 = IPR (دارایی فکری)\n\n17 = SALAF (اوراق سلف موازی استاندارد)\n\n18 = METPET (کالا محصولات فلزی و پتروشیمی)\n\n19 = CORPS (کالا محصولات کشاورزی)\n\n20 = IMPROP (کالا اموال غیرمنقول در بازار فرعی)\n\n21 = MDEP (گواهی سپرده کالایی)\n\n22 = MDEPGC (گواهی سپرده کالایی سکه طلا)\n\n23 = ENGMER (معاملات کالاها)\n\n24 = SALAFPHZPOW (انرژی  سلف موازی; فیزیکی - برقا)\n\n25 = PRJFUND (انرژی  صندوق های پروژه)\n\n26 = CapCert (انرژی  اوراق گواهی ظرفیت)\n\n27 = FUNDINFUND (صندوق در صندوق)\n\n28 = FUNDPRIVATE (صندوق شخصی)\n\n29 = RELES (.املاك ومستغلات)\n\n30 = MDEPDIS (گواهی سپرده کالایی ناپیوسته)",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/InstrumentType"
              }
            }
          },
          {
            "name": "marketType",
            "in": "query",
            "description": "\n\n0 = None\n\n1 = Normal (اصلی)\n\n2 = OddLot (خرده فروشی)\n\n3 = BuyingIn (جبرانی)\n\n4 = Block (عمده)",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/MarketType"
              }
            }
          },
          {
            "name": "queueState",
            "in": "query",
            "description": "\n\n0 = None\n\n1 = BuyAhead\n\n2 = SellAhead\n\n3 = GoingToBuyAhead\n\n4 = GoingToSellAhead",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SymbolQueueState"
              }
            }
          },
          {
            "name": "lastPriceRange",
            "in": "query",
            "description": "\n\n0 = None\n\n1 = AbouveFive (From +5 to infinity)\n\n2 = plusFour (From +4 to +5)\n\n3 = PlusThree (From +3 to +4)\n\n4 = plusTwo (From +2 to +3)\n\n5 = PlusOne (From +1 to +2)\n\n6 = Zero (Between -1..+1)\n\n7 = MinusOne (From -1 to -2)\n\n8 = MinusTwo (From -2 to -3)\n\n9 = MinusThree (From -3 to -4)\n\n10 = MinusFour (From -4 to -5)\n\n11 = BelowMinusFive (From -5 to infinity)",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/PercentageRangeType"
                }
              ],
              "default": 0,
              "x-enumNames": [
                "None",
                "AbouveFive",
                "plusFour",
                "PlusThree",
                "plusTwo",
                "PlusOne",
                "Zero",
                "MinusOne",
                "MinusTwo",
                "MinusThree",
                "MinusFour",
                "BelowMinusFive"
              ],
              "x-enumDescriptions": [
                "",
                "From +5 to infinity",
                "From +4 to +5",
                "From +3 to +4",
                "From +2 to +3",
                "From +1 to +2",
                "Between -1..+1",
                "From -1 to -2",
                "From -2 to -3",
                "From -3 to -4",
                "From -4 to -5",
                "From -5 to infinity"
              ]
            },
            "x-enumNames": [
              "None",
              "AbouveFive",
              "plusFour",
              "PlusThree",
              "plusTwo",
              "PlusOne",
              "Zero",
              "MinusOne",
              "MinusTwo",
              "MinusThree",
              "MinusFour",
              "BelowMinusFive"
            ],
            "x-enumDescriptions": [
              "",
              "From +5 to infinity",
              "From +4 to +5",
              "From +3 to +4",
              "From +2 to +3",
              "From +1 to +2",
              "Between -1..+1",
              "From -1 to -2",
              "From -2 to -3",
              "From -3 to -4",
              "From -4 to -5",
              "From -5 to infinity"
            ]
          },
          {
            "name": "closingPriceRange",
            "in": "query",
            "description": "\n\n0 = None\n\n1 = AbouveFive (From +5 to infinity)\n\n2 = plusFour (From +4 to +5)\n\n3 = PlusThree (From +3 to +4)\n\n4 = plusTwo (From +2 to +3)\n\n5 = PlusOne (From +1 to +2)\n\n6 = Zero (Between -1..+1)\n\n7 = MinusOne (From -1 to -2)\n\n8 = MinusTwo (From -2 to -3)\n\n9 = MinusThree (From -3 to -4)\n\n10 = MinusFour (From -4 to -5)\n\n11 = BelowMinusFive (From -5 to infinity)",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/PercentageRangeType"
                }
              ],
              "default": 0,
              "x-enumNames": [
                "None",
                "AbouveFive",
                "plusFour",
                "PlusThree",
                "plusTwo",
                "PlusOne",
                "Zero",
                "MinusOne",
                "MinusTwo",
                "MinusThree",
                "MinusFour",
                "BelowMinusFive"
              ],
              "x-enumDescriptions": [
                "",
                "From +5 to infinity",
                "From +4 to +5",
                "From +3 to +4",
                "From +2 to +3",
                "From +1 to +2",
                "Between -1..+1",
                "From -1 to -2",
                "From -2 to -3",
                "From -3 to -4",
                "From -4 to -5",
                "From -5 to infinity"
              ]
            },
            "x-enumNames": [
              "None",
              "AbouveFive",
              "plusFour",
              "PlusThree",
              "plusTwo",
              "PlusOne",
              "Zero",
              "MinusOne",
              "MinusTwo",
              "MinusThree",
              "MinusFour",
              "BelowMinusFive"
            ],
            "x-enumDescriptions": [
              "",
              "From +5 to infinity",
              "From +4 to +5",
              "From +3 to +4",
              "From +2 to +3",
              "From +1 to +2",
              "Between -1..+1",
              "From -1 to -2",
              "From -2 to -3",
              "From -3 to -4",
              "From -4 to -5",
              "From -5 to infinity"
            ]
          },
          {
            "name": "underCautionState",
            "in": "query",
            "description": "\n\n0 = Normal\n\n1 = Suspension\n\n2 = IncludedSuspensionProcess\n\n3 = UnderCaution",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/UnderCautionStateEnum"
                }
              ]
            },
            "x-enumNames": [
              "Normal",
              "Suspension",
              "IncludedSuspensionProcess",
              "UnderCaution"
            ],
            "x-enumDescriptions": [
              "",
              "",
              "",
              ""
            ]
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page Number (default: 1)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page Size (default: 20)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Sorting",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SortModel"
              }
            }
          },
          {
            "name": "json-format",
            "in": "header",
            "description": "Response with full-json | json-csv format",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/marketer/count": {
      "get": {
        "tags": [
          "Marketer"
        ],
        "summary": "Get total and today coustomer count",
        "description": "result csv map :TotalCustomer, TodayCustomer, TotalCustomerWage, MarketerWage, topTen[InvestorAccountCode, Name, Wage], MarketerCommision, MarketerIndirectWage",
        "operationId": "Get",
        "parameters": [
          {
            "name": "wageFromDate",
            "in": "query",
            "description": "default: 7 days ago, max 365 days",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "wageToDate",
            "in": "query",
            "description": "default: today",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/marketer/customer": {
      "get": {
        "tags": [
          "Marketer"
        ],
        "summary": "Get all personage",
        "description": "result csv map : PersonageId, personageTitle, NationalCode, Mobile, Portfolio, RegisterDate, TradeCount, TradeValue, CustomerWage, MarketerWage",
        "operationId": "GetMyCustomer",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "name of customer",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "wageFromDate",
            "in": "query",
            "description": "default: 7 days ago, max 365 days",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "wageToDate",
            "in": "query",
            "description": "default: today",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/marketer/marketer": {
      "get": {
        "tags": [
          "Marketer"
        ],
        "summary": "Get all personage that is marketer",
        "description": "result csv map : PersonageId, personageTitle, RegisterDate, TradeCount, TradeValue, CustomerWage, MarketerCommision, MarketerWage",
        "operationId": "GetMyMarketer",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "name of customer",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "wageFromDate",
            "in": "query",
            "description": "default: 7 days ago, max 365 days",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "wageToDate",
            "in": "query",
            "description": "default: today",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/marketer/customer/{exportType}": {
      "get": {
        "tags": [
          "Marketer"
        ],
        "summary": "Export all personage",
        "operationId": "GetMyCustomerExport",
        "parameters": [
          {
            "name": "exportType",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "pattern": "^csv$|^excel$|^xml$|^pdf$",
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "wageFromDate",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "wageToDate",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/marketer/marketer/{exportType}": {
      "get": {
        "tags": [
          "Marketer"
        ],
        "summary": "Export all personage that is marketer",
        "operationId": "GetMyMarketerExport",
        "parameters": [
          {
            "name": "exportType",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "pattern": "^csv$|^excel$|^xml$|^pdf$",
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "wageFromDate",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "wageToDate",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/message/unread": {
      "get": {
        "tags": [
          "Message"
        ],
        "summary": "Get all unread message",
        "description": "result map : OverseerCount, SystemCount, NewsCount",
        "operationId": "GetAllUnread",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/message/overseer": {
      "get": {
        "tags": [
          "Message"
        ],
        "summary": "Get all merket overseer or supervisor message",
        "description": "resuslt csv map : Id, Title, Body, EntryDate, IsViewed, Tags{Isin, Name}",
        "operationId": "GetAllOverseer",
        "parameters": [
          {
            "name": "searchTest",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tags",
            "in": "query",
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page Number (default: 1)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page Size (default: 20)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/message/overseer/{id}": {
      "post": {
        "tags": [
          "Message"
        ],
        "summary": "Save viewed overseer or supervisor message",
        "operationId": "ViewOverseer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/message/system": {
      "get": {
        "tags": [
          "Message"
        ],
        "summary": "Get all system message",
        "description": "resuslt csv map : Id, Title, Body, EntryDate, IsViewed, Priority",
        "operationId": "GetAllSys",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page Number (default: 1)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page Size (default: 20)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/message/system/{id}": {
      "get": {
        "tags": [
          "Message"
        ],
        "summary": "Get system message by id",
        "operationId": "GetSys",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "Message"
        ],
        "summary": "Save viewed system message",
        "operationId": "ViewSys",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/message/email/track/{id}": {
      "get": {
        "tags": [
          "Message"
        ],
        "summary": "Track email message",
        "operationId": "TrackEmail",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "email traker id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/order": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Get active order",
        "description": "result data map : OrderId, Isin, InstrumentName,OrderSide, OrderSideName, Price, Quantity, RemainQuantity, OrderStatusName, EntryTime, Instrument{UpperPriceThreshold, \r\nLowerPriceThreshold, UpperTradePrice, LowestTradePrice, LastPrice, ClosingPrice, YesterdayPrice}, ExecutedQuantity, ValidityType, ValidityDate, IsFix, HostOrderNumber, CanceledQuantity,\r\nOrderPosition, OrderVolume",
        "operationId": "GetOrder",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page Number (default: 1)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page Size (default: 20)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Send an online order",
        "operationId": "AddOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/OrderModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "Order"
        ],
        "summary": "Modify an online order",
        "operationId": "ModifyOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateOrderModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/order/{fromDate}/{toDate}": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Get order report",
        "description": "result data map : OrderId, Isin, InstrumentName, OrderSide, OrderSideName, Price, Quntity, PersonageName, RemainQuantity, OrderStatusName, ValidityTypeName, ValidityDate, EntryDateTime, ExecutedQuantity, CanceledQuantity, TraderType",
        "operationId": "GetOrderReport",
        "parameters": [
          {
            "name": "fromDate",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "toDate",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "isin",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderSide",
            "in": "query",
            "description": "\n\n1 = Buy (Buy)\n\n2 = Sell (Sell)",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/OrderSide"
                }
              ]
            },
            "x-enumNames": [
              "Buy",
              "Sell"
            ],
            "x-enumDescriptions": [
              "Buy",
              "Sell"
            ]
          },
          {
            "name": "orderStatusId",
            "in": "query",
            "description": "\n\n0 = None\n\n1 = Pending\n\n2 = Sending\n\n3 = Sent\n\n4 = Confirmed\n\n5 = Error\n\n6 = ExecutedAndConfirmed\n\n7 = ExecutedAndCancelled\n\n8 = Executed\n\n9 = ExecutedAndModified\n\n10 = PendingCancellation\n\n11 = Cancelled\n\n12 = PendingModification\n\n13 = ConfirmedModify\n\n14 = Modified\n\n15 = RejectModifyOrder\n\n16 = Deactivated\n\n17 = ModifySent\n\n18 = CancelSent",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/OrderState"
              }
            }
          },
          {
            "name": "validityType",
            "in": "query",
            "description": "\n\n1 = Day (Day)\n\n2 = GoodTillCanceld (Good until canceled)\n\n3 = GooTillDate (Good until date)\n\n4 = FiilOrKill (Fill or Kill)",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ValidityType"
                }
              ]
            },
            "x-enumNames": [
              "Day",
              "GoodTillCanceld",
              "GooTillDate",
              "FiilOrKill"
            ],
            "x-enumDescriptions": [
              "Day",
              "Good until canceled",
              "Good until date",
              "Fill or Kill"
            ]
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page Number (default: 1)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page Size (default: 20)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/order/trade": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Get today trade",
        "description": "result data map : Isin, InstrumentName, OrderSide, Price, Quantity, Wage, Amount, TransactionDate, TradeCount",
        "operationId": "GetTrade",
        "parameters": [
          {
            "name": "isAggregate",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page Number (default: 1)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page Size (default: 20)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/order/trade/{fromDate}/{toDate}": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Get trade report",
        "description": "result data map : Isin, InstrumentName, OrderSide, TransactionDate, Price, Quantity, Wage, TraderType, Amount, TradeState, TradeCount",
        "operationId": "GetTradeReport",
        "parameters": [
          {
            "name": "fromDate",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "toDate",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "isin",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderSide",
            "in": "query",
            "description": "\n\n1 = Buy (Buy)\n\n2 = Sell (Sell)",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/OrderSide"
                }
              ]
            },
            "x-enumNames": [
              "Buy",
              "Sell"
            ],
            "x-enumDescriptions": [
              "Buy",
              "Sell"
            ]
          },
          {
            "name": "isAggregate",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "accountCode",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page Number (default: 1)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page Size (default: 20)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/order/trade/{date}/{isin}/{orderSide}": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Get trade aggregate detail",
        "description": "result data map : TransactionDate, Price, Quantity, Wage, TraderType, Amount, TradeState",
        "operationId": "GetTradeAggregateDetail",
        "parameters": [
          {
            "name": "date",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "isin",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "maxLength": 12,
              "minLength": 12,
              "type": "string"
            }
          },
          {
            "name": "orderSide",
            "in": "path",
            "description": "\n\n1 = Buy (Buy)\n\n2 = Sell (Sell)",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/OrderSide"
                }
              ],
              "x-enumNames": [
                "Buy",
                "Sell"
              ],
              "x-enumDescriptions": [
                "Buy",
                "Sell"
              ]
            },
            "x-enumNames": [
              "Buy",
              "Sell"
            ],
            "x-enumDescriptions": [
              "Buy",
              "Sell"
            ]
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page Number (default: 1)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page Size (default: 20)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/order/history/{orderId}": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Get the history of an order",
        "description": "data map: OrderDate, ErrorCode, ErrorDescription, OrderState, ExecutedAveragePrice, Quantity, RemainingQuantity",
        "operationId": "GetOrderHistory",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/order/{orderId}": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Get an order with its id",
        "description": "result data map : OrderId, Isin, InstrumentName, OrderSide, OrderSideName, Price, Quntity, PersonageName, RemainQuantity, OrderStatusName, ValidityTypeName, ValidityDate, EntryDateTime",
        "operationId": "GetOrderById",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "Order"
        ],
        "summary": "Cancel an online order",
        "operationId": "CancelOrder",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/order/cancel-all": {
      "delete": {
        "tags": [
          "Order"
        ],
        "summary": "Cancel all active online orders",
        "description": "data map: orderId",
        "operationId": "CancelActiveOrders",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/order/batch": {
      "put": {
        "tags": [
          "Order"
        ],
        "summary": "Send batch modify online orders",
        "description": "data map: OrderId",
        "operationId": "ModifyOrderBatch",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/OrderBatchUpdateModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "Order"
        ],
        "summary": "Send batch Cancel online orders",
        "description": "data map: OrderIds",
        "operationId": "CancelOrderBatch",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/order/online-ipo": {
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Send an ipo order",
        "description": "data map: OrderId",
        "operationId": "AddOnlineIpo",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/IpoOrderModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "Order"
        ],
        "summary": "Modify an online ipo order",
        "operationId": "ModifyOnlineIpo",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateOrderModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/order/online-ipo/{orderId}": {
      "delete": {
        "tags": [
          "Order"
        ],
        "summary": "Cancel an online ipo order",
        "description": "datamap: OrderId",
        "operationId": "DeleteOnlineIpo",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/order/{exportType}/{fromDate}/{toDate}": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Order export to csv, excel, xml, pdf",
        "operationId": "GetOrderExport",
        "parameters": [
          {
            "name": "exportType",
            "in": "path",
            "description": "csv|excel|xml|pdf",
            "required": true,
            "schema": {
              "pattern": "^csv$|^excel$|^xml$|^pdf$",
              "type": "string"
            }
          },
          {
            "name": "fromDate",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "toDate",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "isin",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderSide",
            "in": "query",
            "description": "\n\n1 = Buy (Buy)\n\n2 = Sell (Sell)",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/OrderSide"
                }
              ]
            },
            "x-enumNames": [
              "Buy",
              "Sell"
            ],
            "x-enumDescriptions": [
              "Buy",
              "Sell"
            ]
          },
          {
            "name": "orderStatusId",
            "in": "query",
            "description": "\n\n0 = None\n\n1 = Pending\n\n2 = Sending\n\n3 = Sent\n\n4 = Confirmed\n\n5 = Error\n\n6 = ExecutedAndConfirmed\n\n7 = ExecutedAndCancelled\n\n8 = Executed\n\n9 = ExecutedAndModified\n\n10 = PendingCancellation\n\n11 = Cancelled\n\n12 = PendingModification\n\n13 = ConfirmedModify\n\n14 = Modified\n\n15 = RejectModifyOrder\n\n16 = Deactivated\n\n17 = ModifySent\n\n18 = CancelSent",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/OrderState"
                }
              ]
            },
            "x-enumNames": [
              "None",
              "Pending",
              "Sending",
              "Sent",
              "Confirmed",
              "Error",
              "ExecutedAndConfirmed",
              "ExecutedAndCancelled",
              "Executed",
              "ExecutedAndModified",
              "PendingCancellation",
              "Cancelled",
              "PendingModification",
              "ConfirmedModify",
              "Modified",
              "RejectModifyOrder",
              "Deactivated",
              "ModifySent",
              "CancelSent"
            ],
            "x-enumDescriptions": [
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              ""
            ]
          },
          {
            "name": "validityType",
            "in": "query",
            "description": "\n\n1 = Day (Day)\n\n2 = GoodTillCanceld (Good until canceled)\n\n3 = GooTillDate (Good until date)\n\n4 = FiilOrKill (Fill or Kill)",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ValidityType"
                }
              ]
            },
            "x-enumNames": [
              "Day",
              "GoodTillCanceld",
              "GooTillDate",
              "FiilOrKill"
            ],
            "x-enumDescriptions": [
              "Day",
              "Good until canceled",
              "Good until date",
              "Fill or Kill"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/order/trade/{exportType}/{fromDate}/{toDate}": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Trade export to csv, excel, xml, pdf",
        "operationId": "GetTradeExport",
        "parameters": [
          {
            "name": "exportType",
            "in": "path",
            "description": "csv|excel|xml|pdf",
            "required": true,
            "schema": {
              "pattern": "^csv$|^excel$|^xml$|^pdf$",
              "type": "string"
            }
          },
          {
            "name": "fromDate",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "toDate",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "isin",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderSide",
            "in": "query",
            "description": "\n\n1 = Buy (Buy)\n\n2 = Sell (Sell)",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/OrderSide"
                }
              ]
            },
            "x-enumNames": [
              "Buy",
              "Sell"
            ],
            "x-enumDescriptions": [
              "Buy",
              "Sell"
            ]
          },
          {
            "name": "isAggregate",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/order/depth-index/{isin}/{side}/{orderNumber}": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Get order index and sum of volume",
        "description": "data map: Index, Volume",
        "operationId": "GetOrderDepthIndex",
        "parameters": [
          {
            "name": "isin",
            "in": "path",
            "description": "instrument identification as in : IRO1CIDC0001, IRO1PNBA0001, IRO1FOLD0001",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "side",
            "in": "path",
            "description": "1: buy, 2: sell",
            "required": true,
            "schema": {
              "maxLength": 12,
              "minLength": 12,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderNumber",
            "in": "path",
            "description": "host order number",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/portfolio/asset-summary": {
      "get": {
        "tags": [
          "Portfolio"
        ],
        "summary": "Get customer asset type summary",
        "description": "result csv map: ShareCount, OptionCount, ...",
        "operationId": "GetAssetTypeSummary",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/portfolio": {
      "get": {
        "tags": [
          "Portfolio"
        ],
        "summary": "Get portfolio",
        "description": "result data map (share): Isin, InstrumentName, AveragePrice, Quantity, BuyCostBasis, BreakEvenPoint, ProfitLoss, ProfitLossPercent, Value, BidAskVolume(Ask, Bid), PecentOfTotal, SellWage, BuyWage\r\n\r\nresult data map (option): Isin, InstrumentName, AveragePrice, Quantity, BuyCostBasis, BreakEvenPoint, ProfitLoss, ProfitLossPercent, Value, BidAskVolume(Ask, Bid), PecentOfTotal, SellWage, BuyWage, OptType, AmountBlocked, AssetBlocked\r\n\r\nFormulas :\r\n            \r\n    Value = Quantity * LastPrice * (1 - SellWage) \r\n    ProfitLoss = Value - BuyCostBasis \r\n    ProfitLossPercent = (ProfitLoss / BuyCostBasis) * 100 \r\n    Total Value = Sum(Value) \r\n    Total ProfitLoss = Sum(ProfitLoss) \r\n    Total ProfitLossPercent = (Total ProfitLoss / Total Value) * 100",
        "operationId": "GetPortfolio",
        "parameters": [
          {
            "name": "assetType",
            "in": "query",
            "description": "\n\n1 = Share\n\n2 = Option",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AssetType"
                }
              ],
              "default": 1,
              "x-enumNames": [
                "Share",
                "Option"
              ],
              "x-enumDescriptions": [
                "",
                ""
              ]
            },
            "x-enumNames": [
              "Share",
              "Option"
            ],
            "x-enumDescriptions": [
              "",
              ""
            ]
          },
          {
            "name": "basePriceType",
            "in": "query",
            "description": "\n\n0 = Auto\n\n1 = LastPrice\n\n2 = ClosingPrice",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BasePriceType"
                }
              ],
              "default": 0,
              "x-enumNames": [
                "Auto",
                "LastPrice",
                "ClosingPrice"
              ],
              "x-enumDescriptions": [
                "",
                "",
                ""
              ]
            },
            "x-enumNames": [
              "Auto",
              "LastPrice",
              "ClosingPrice"
            ],
            "x-enumDescriptions": [
              "",
              "",
              ""
            ]
          },
          {
            "name": "showAll",
            "in": "query",
            "description": "retrive asset that quantity is zero",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page Number (default: 1)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page Size (default: 20)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Sorting",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SortModel"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/portfolio/{exportType}": {
      "get": {
        "tags": [
          "Portfolio"
        ],
        "summary": "Portfolio export to csv, excel, xml, pdf",
        "operationId": "GetPortfolioExport",
        "parameters": [
          {
            "name": "exportType",
            "in": "path",
            "description": "csv|excel|xml|pdf",
            "required": true,
            "schema": {
              "pattern": "^csv$|^excel$|^xml$|^pdf$",
              "type": "string"
            }
          },
          {
            "name": "assetType",
            "in": "query",
            "description": "\n\n1 = Share\n\n2 = Option",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AssetType"
                }
              ],
              "default": 1,
              "x-enumNames": [
                "Share",
                "Option"
              ],
              "x-enumDescriptions": [
                "",
                ""
              ]
            },
            "x-enumNames": [
              "Share",
              "Option"
            ],
            "x-enumDescriptions": [
              "",
              ""
            ]
          },
          {
            "name": "basePriceType",
            "in": "query",
            "description": "\n\n0 = Auto\n\n1 = LastPrice\n\n2 = ClosingPrice",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BasePriceType"
                }
              ],
              "default": 0,
              "x-enumNames": [
                "Auto",
                "LastPrice",
                "ClosingPrice"
              ],
              "x-enumDescriptions": [
                "",
                "",
                ""
              ]
            },
            "x-enumNames": [
              "Auto",
              "LastPrice",
              "ClosingPrice"
            ],
            "x-enumDescriptions": [
              "",
              "",
              ""
            ]
          },
          {
            "name": "showAll",
            "in": "query",
            "description": "retrive asset that quantity is zero",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SortModel"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/portfolio/{isin}": {
      "get": {
        "tags": [
          "Portfolio"
        ],
        "summary": "Get Potfolio instrument quantity",
        "operationId": "GetPortfolioByIsin",
        "parameters": [
          {
            "name": "isin",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "maxLength": 12,
              "minLength": 12,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/portfolio/{isin}/history": {
      "get": {
        "tags": [
          "Portfolio"
        ],
        "summary": "Get portfolio history",
        "description": "result csv map : Id, Quantity, Price, DateOfEvent, TypeOfEvent, Remain",
        "operationId": "History",
        "parameters": [
          {
            "name": "isin",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "maxLength": 12,
              "minLength": 12,
              "type": "string"
            }
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page Number (default: 1)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page Size (default: 20)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Sorting",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SortModel"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/portfolio/cds-portfolio": {
      "get": {
        "tags": [
          "Portfolio"
        ],
        "summary": "Get cds portfolio",
        "description": "data map: Isin, InstrumentTitle, InstrumentName, Quantity, Price, StockValue, LastChangeDate",
        "operationId": "GetRemainingCdsPortfo",
        "parameters": [
          {
            "name": "endDate",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page Number (default: 1)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page Size (default: 20)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/portfolio/cds-portfolio/{exportType}": {
      "get": {
        "tags": [
          "Portfolio"
        ],
        "summary": "Cds portfolio export to csv, excel, xml, pdf",
        "operationId": "GetRemainingCdsPortfoExport",
        "parameters": [
          {
            "name": "exportType",
            "in": "path",
            "description": "csv|excel|xml|pdf",
            "required": true,
            "schema": {
              "pattern": "^csv$|^excel$|^xml$|^pdf$",
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/portfolio/detail": {
      "get": {
        "tags": [
          "Portfolio"
        ],
        "summary": "Get Portfolio detail list Report",
        "description": "result data map : Isin, InstrumentName, InstrumentState, BidAskVolume(Ask, Bid), Quantity, Value, LastPrice, LastPricePercent, ClosingPrice, ClosingPricePercent, AveragePrice, BuyCostBasis, BreakEvenPoint, ProfitLossRemain, Percent, ProfitLossToday, SellWage, [SL,TP]",
        "operationId": "GetDetailPortfolio",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page Number (default: 1)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page Size (default: 20)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "deprecated": true
      }
    },
    "/api/portfolio/visual": {
      "get": {
        "tags": [
          "Portfolio"
        ],
        "summary": "Get portfolio report",
        "description": "result data map : Efficiency1, Efficiency2, EfficiencyRate, \r\n    TradeAverage {Date, TradeCount, ShareCount}, \r\n    ByValue {Name, Percent}, \r\n    ByQuantity { Name, Percent}, \r\n    EfficiencyRate {Date, Min, Max, Diff}\r\n    Map {Name, Value, Percent}",
        "operationId": "GetPortfolioVisualReport",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "deprecated": true
      }
    },
    "/api/portfolio/net-purchase-avg/{isin}/{price}": {
      "put": {
        "tags": [
          "Portfolio"
        ],
        "summary": "",
        "operationId": "UpdateNetPurchaseAverage",
        "parameters": [
          {
            "name": "isin",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "maxLength": 12,
              "minLength": 12,
              "type": "string"
            }
          },
          {
            "name": "price",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "number",
              "format": "decimal"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/portfolio/map": {
      "get": {
        "tags": [
          "Portfolio"
        ],
        "summary": "Portfolio map",
        "description": "result csv map: mapsort, [Isin, InstrumentName, InstrumentTitle, MarketValue, Percent]",
        "operationId": "GetPortfolioMap",
        "parameters": [
          {
            "name": "assetType",
            "in": "query",
            "description": "\n\n1 = Share\n\n2 = Option",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AssetType"
                }
              ]
            },
            "x-enumNames": [
              "Share",
              "Option"
            ],
            "x-enumDescriptions": [
              "",
              ""
            ]
          },
          {
            "name": "mapSort",
            "in": "query",
            "description": "\n\n0 = None (بدون دسته بندی)\n\n1 = Stock (نوع سهام)\n\n2 = Exchange (نوع بازار)\n\n3 = Industry (گروه های صنعت)",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/PortfolioMapSort"
                }
              ],
              "default": 0,
              "x-enumNames": [
                "None",
                "Stock",
                "Exchange",
                "Industry"
              ],
              "x-enumDescriptions": [
                "بدون دسته بندی",
                "نوع سهام",
                "نوع بازار",
                "گروه های صنعت"
              ]
            },
            "x-enumNames": [
              "None",
              "Stock",
              "Exchange",
              "Industry"
            ],
            "x-enumDescriptions": [
              "بدون دسته بندی",
              "نوع سهام",
              "نوع بازار",
              "گروه های صنعت"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/portfolio/pnl": {
      "get": {
        "tags": [
          "Portfolio"
        ],
        "summary": "Get profit and loss (pnl)",
        "description": "result data map : Isin, InstrumentName, InstrumentStateCode, InstrumentStateTitle, AveragePrice, LastPrice, LastPricePercent, ClosingPrice, ClosingPricePercent, Quantity, CDSQuantity,\r\nBuyCostBasis, BreakEvenPoint, ProfitLoss, ProfitLossPercent, TodayProfitLoss, TodayProfitLossPercent, SoldProfitLoss, SoldProfitLossPercent, Value, DividendPayout, PecentOfTotal, SellWage\r\n\r\nFormulas :\r\n            \r\n    Value = Quantity * LastPrice * (1 - SellWage) \r\n    ProfitLoss = Value - BuyCostBasis \r\n    ProfitLossPercent = (ProfitLoss / BuyCostBasis) * 100 \r\n    Total ProfitLoss = Sum(ProfitLoss) \r\n    Total ProfitLossPercent = (TotalValue / TotalProfitLoss) * 100  \r\n    TodayProfitLoss = Quantity * LastPriceVariation \r\n    TodayProfitLossPercent = LastPricePercent     \r\n    Total Today ProfitLoss = Sum(TodayProfitLoss) \r\n    Total Today ProfitLossPercent = Sum(TodayProfitLossPercent)",
        "operationId": "GetProfitAndLoss",
        "parameters": [
          {
            "name": "assetType",
            "in": "query",
            "description": "\n\n1 = Share\n\n2 = Option",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AssetType"
                }
              ],
              "default": 1,
              "x-enumNames": [
                "Share",
                "Option"
              ],
              "x-enumDescriptions": [
                "",
                ""
              ]
            },
            "x-enumNames": [
              "Share",
              "Option"
            ],
            "x-enumDescriptions": [
              "",
              ""
            ]
          },
          {
            "name": "basePriceType",
            "in": "query",
            "description": "\n\n0 = Auto\n\n1 = LastPrice\n\n2 = ClosingPrice",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BasePriceType"
                }
              ],
              "default": 0,
              "x-enumNames": [
                "Auto",
                "LastPrice",
                "ClosingPrice"
              ],
              "x-enumDescriptions": [
                "",
                "",
                ""
              ]
            },
            "x-enumNames": [
              "Auto",
              "LastPrice",
              "ClosingPrice"
            ],
            "x-enumDescriptions": [
              "",
              "",
              ""
            ]
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page Number (default: 1)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page Size (default: 20)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Sorting",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SortModel"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/portfolio/pnl/{exportType}": {
      "get": {
        "tags": [
          "Portfolio"
        ],
        "summary": "Pnl export to csv, excel, xml, pdf",
        "operationId": "GetProfitAndLossExport",
        "parameters": [
          {
            "name": "exportType",
            "in": "path",
            "description": "csv|excel|xml|pdf",
            "required": true,
            "schema": {
              "pattern": "^csv$|^excel$|^xml$|^pdf$",
              "type": "string"
            }
          },
          {
            "name": "assetType",
            "in": "query",
            "description": "\n\n1 = Share\n\n2 = Option",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AssetType"
                }
              ],
              "default": 1,
              "x-enumNames": [
                "Share",
                "Option"
              ],
              "x-enumDescriptions": [
                "",
                ""
              ]
            },
            "x-enumNames": [
              "Share",
              "Option"
            ],
            "x-enumDescriptions": [
              "",
              ""
            ]
          },
          {
            "name": "basePriceType",
            "in": "query",
            "description": "\n\n0 = Auto\n\n1 = LastPrice\n\n2 = ClosingPrice",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BasePriceType"
                }
              ],
              "default": 0,
              "x-enumNames": [
                "Auto",
                "LastPrice",
                "ClosingPrice"
              ],
              "x-enumDescriptions": [
                "",
                "",
                ""
              ]
            },
            "x-enumNames": [
              "Auto",
              "LastPrice",
              "ClosingPrice"
            ],
            "x-enumDescriptions": [
              "",
              "",
              ""
            ]
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SortModel"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/portfolio/pnl-eval": {
      "get": {
        "tags": [
          "Portfolio"
        ],
        "summary": "Get porofit and loss evaluation",
        "description": "result csv map : Date, MarketValue, LastProfitLoss, LastProfitLossPercent, ProfitLoss, ProfitLossPercent, PortfolioSeries[DateTime DateOfEvent, decimal Value, ProfitLoss, ProfitLossPercent], WalletRemain, WalletSeries[DateTime DateOfEvent, decimal Remain], InstrumentTypeSummary",
        "operationId": "GetProfitAndLossEvaluation",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "assetType",
            "in": "query",
            "description": "\n\n1 = Share\n\n2 = Option",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AssetType"
                }
              ],
              "default": 1,
              "x-enumNames": [
                "Share",
                "Option"
              ],
              "x-enumDescriptions": [
                "",
                ""
              ]
            },
            "x-enumNames": [
              "Share",
              "Option"
            ],
            "x-enumDescriptions": [
              "",
              ""
            ]
          },
          {
            "name": "timeFrame",
            "in": "query",
            "description": "\n\n1 = Day (روز)\n\n2 = Week (هفته)\n\n3 = Month (ماه)",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/MapTimeFrame"
                }
              ],
              "default": 1,
              "x-enumNames": [
                "Day",
                "Week",
                "Month"
              ],
              "x-enumDescriptions": [
                "روز",
                "هفته",
                "ماه"
              ]
            },
            "x-enumNames": [
              "Day",
              "Week",
              "Month"
            ],
            "x-enumDescriptions": [
              "روز",
              "هفته",
              "ماه"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/pre-order/{id}": {
      "get": {
        "tags": [
          "PreOrder"
        ],
        "summary": "Get PreOrder",
        "description": "csv result map :Id, Isin, InstrumentName, OrderSide, Price, Quantity, EntryDate, ValidityDate, ValidityType, Instrument{UpperPriceThreshold, LowerPriceThreshold, UpperTradePrice, LowestTradePrice, LastPrice, ClosingPrice, YesterdayPrice}",
        "operationId": "Get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "PreOrder"
        ],
        "summary": "Remove pre order",
        "operationId": "Remove",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/pre-order": {
      "get": {
        "tags": [
          "PreOrder"
        ],
        "summary": "Get All PreOrder",
        "description": "csv result map :Id, Isin, InstrumentName, OrderSide, Price, Quantity, EntryDate, ValidityDate, ValidityType, \r\nInstrument{UpperPriceThreshold, LowerPriceThreshold, UpperTradePrice, LowestTradePrice, LastPrice, ClosingPrice, YesterdayPrice, BuyWage, SellWage}",
        "operationId": "GetAll",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "PreOrder"
        ],
        "summary": "Add new PreOrder",
        "operationId": "Add",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PreOrderCreatModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "PreOrder"
        ],
        "summary": "Update or Modify PreOrder",
        "operationId": "Update",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PreOrderModifyModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "PreOrder"
        ],
        "summary": "Remove all pre order",
        "operationId": "RemoveAll",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/pre-order/batch": {
      "delete": {
        "tags": [
          "PreOrder"
        ],
        "summary": "Remove batch pre order",
        "operationId": "RemoveBatch",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/pre-order/send": {
      "post": {
        "tags": [
          "PreOrder"
        ],
        "summary": "Send pre orders and remove it",
        "operationId": "Send",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/pre-order/senda-all": {
      "post": {
        "tags": [
          "PreOrder"
        ],
        "summary": "Send all pre orders and remove it",
        "operationId": "SendAll",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/report/user-entry": {
      "get": {
        "tags": [
          "Report"
        ],
        "summary": "Get user entry report",
        "description": "data map: EventDate, EventTime, IpAddress, Status, Device",
        "operationId": "GetUserEntryReport",
        "parameters": [
          {
            "name": "fromDate",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page Number (default: 1)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page Size (default: 20)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/request/broker-bank-account": {
      "get": {
        "tags": [
          "Request"
        ],
        "summary": "Get broker bank accounts",
        "description": "result data map: Id, BankName, BranchName, AccountNumber, Sheba",
        "operationId": "GetBrokerBankAccount",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/request/epayment-gateway": {
      "get": {
        "tags": [
          "Request"
        ],
        "summary": "online deposit (electronic payment) bank gateway list",
        "description": "result data map: Id, BankName",
        "operationId": "EpaymentGateway",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/request/epayment": {
      "post": {
        "tags": [
          "Request"
        ],
        "summary": "Create online deposit (electronic payment)",
        "operationId": "CreateOnlineDeposit",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/EPaymentModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "tags": [
          "Request"
        ],
        "summary": "Get online deposit (electronic payment) list",
        "description": "result data map: OrderNumber, Amount, BankName, Status, OrderDate",
        "operationId": "GetOnlineDeposit",
        "parameters": [
          {
            "name": "fromDate",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page Number (default: 1)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page Size (default: 20)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/request/offline-deposit": {
      "get": {
        "tags": [
          "Request"
        ],
        "summary": "Get offline deposit request",
        "description": "result csv map : Id, SourceId, DepositType, Amount, RegisterDate, StateId, StateTitle",
        "operationId": "GetOfflineDepositRequest",
        "parameters": [
          {
            "name": "fromDate",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page Number (default: 1)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page Size (default: 20)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "Request"
        ],
        "summary": "Create new offline deposit request",
        "operationId": "CreateOfflineDepositRequest",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/OfflineDepositModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/request/offline-deposit/{id}/attachment": {
      "get": {
        "tags": [
          "Request"
        ],
        "summary": "Get offline deposit request attachment",
        "operationId": "GetOfflineDepositRequestAttachment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/request/offline-deposit/{id}": {
      "delete": {
        "tags": [
          "Request"
        ],
        "summary": "Delete offline deposit requuest",
        "operationId": "DeleteOfflineDepositRequest",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/request/withdrawal-t1t2t3": {
      "get": {
        "tags": [
          "Request"
        ],
        "summary": "Get payment remain limit (t1, t2, t3)",
        "description": "result data map: Date, Remain",
        "operationId": "GetPaymentT1T1T3",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/request/withdrawal": {
      "post": {
        "tags": [
          "Request"
        ],
        "summary": "Add withdrawal request",
        "operationId": "AddWithdrawalRequest",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/WithdrawalRequestModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "tags": [
          "Request"
        ],
        "summary": "Get last 5 withdrawal request",
        "description": "result data map: Id, PaymentRequestDate, AccountNumber, Amount, BankName, CreationDate, CheckDate, Status, StatusId, Description, IsContinuosWitdrawal",
        "operationId": "GetWithdrawalRequest",
        "parameters": [
          {
            "name": "fromDate",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page Number (default: 1)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page Size (default: 20)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/request/withdrawal/{id}": {
      "delete": {
        "tags": [
          "Request"
        ],
        "summary": "Delete withdrawal request",
        "operationId": "DeleteWithdrawalRequest",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/request/continuos-withdrawal": {
      "get": {
        "tags": [
          "Request"
        ],
        "summary": "Get continuos withdrawal",
        "description": "result csv map : Id,StartDate,ValueType,RangeType,Value,PayCount,BankTitle,BankBranchTitle,BankAccountNumber,IsActive,NextPayDate",
        "operationId": "GetContinuosWithdrawal",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page Number (default: 1)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page Size (default: 20)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "Request"
        ],
        "summary": "Add continuos withdrawal",
        "operationId": "AddContinuosWithdrawal",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContinuosWithdrawalModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/request/continuos-withdrawal/{id}": {
      "delete": {
        "tags": [
          "Request"
        ],
        "summary": "Deactive continuos withdrawal",
        "operationId": "DeactiveContinuosWithdrawal",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/request/continuos-withdrawal/predict": {
      "get": {
        "tags": [
          "Request"
        ],
        "summary": "Get predict on continuos-withdrawal",
        "description": "result csv map: PayDate, Amount",
        "operationId": "GetContinuosWithdrawalPredictAsync",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "default: Today",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "amount",
            "in": "query",
            "description": "default: 100%",
            "schema": {
              "type": "number",
              "format": "double",
              "default": 100
            }
          },
          {
            "name": "valueType",
            "in": "query",
            "description": "default: Percent\n\n1 = Amount\n\n2 = Percent",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ValueType"
                }
              ],
              "default": 2,
              "x-enumNames": [
                "Amount",
                "Percent"
              ],
              "x-enumDescriptions": [
                "",
                ""
              ]
            },
            "x-enumNames": [
              "Amount",
              "Percent"
            ],
            "x-enumDescriptions": [
              "",
              ""
            ]
          },
          {
            "name": "rangeType",
            "in": "query",
            "description": "default: Monthly\n\n1 = Weekly\n\n2 = Monthly",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/RangeType"
                }
              ],
              "default": 2,
              "x-enumNames": [
                "Weekly",
                "Monthly"
              ],
              "x-enumDescriptions": [
                "",
                ""
              ]
            },
            "x-enumNames": [
              "Weekly",
              "Monthly"
            ],
            "x-enumDescriptions": [
              "",
              ""
            ]
          },
          {
            "name": "payCount",
            "in": "query",
            "description": "default: 12",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 12
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page Number (default: 1)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page Size (default: 20)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/request/change-supervisor": {
      "post": {
        "tags": [
          "Request"
        ],
        "summary": "Add change supervisor request",
        "operationId": "AddChangeSupervisorRequest",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ChangeSupervisorRequestModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "tags": [
          "Request"
        ],
        "summary": "Get change supervisor requests with date and pagination and isin searching capabilites",
        "description": "result data map: Id, InstrumentName, ChangeRequestDate, RequestStatus, RequestStatusId",
        "operationId": "GetChangeSupervisorRequest",
        "parameters": [
          {
            "name": "fromDate",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "isin",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page Number (default: 1)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page Size (default: 20)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/request/change-supervisor/{id}": {
      "delete": {
        "tags": [
          "Request"
        ],
        "summary": "Delete change supervisor request",
        "operationId": "DeleteChangeSupervisorRequest",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/request/ipo-order": {
      "post": {
        "tags": [
          "Request"
        ],
        "summary": "Add an offline Ipo Order",
        "operationId": "AddIpoOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/IpoOrderRequestModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "tags": [
          "Request"
        ],
        "summary": "Get all Oflline Ipo orders",
        "description": "data map: OrderId, EntryDate, InstrumentName, OrderStatusId, OrderStatus, Quantity, FailDescription",
        "operationId": "GetIpoReports",
        "parameters": [
          {
            "name": "fromDate",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page Number (default: 1)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page Size (default: 20)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ipoOrderStatusId",
            "in": "query",
            "description": "\n\n1 = Pending\n\n2 = Executed\n\n3 = Failed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/IpoState"
                }
              ]
            },
            "x-enumNames": [
              "Pending",
              "Executed",
              "Failed"
            ],
            "x-enumDescriptions": [
              "",
              "",
              ""
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/request/ipo-order/{orderId}": {
      "delete": {
        "tags": [
          "Request"
        ],
        "summary": "Delete an Offline Ipo order",
        "operationId": "DeleteIpoOrder",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/request/credit-request": {
      "post": {
        "tags": [
          "Request"
        ],
        "summary": "Create new credit request",
        "operationId": "AddNewCreditRequest",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PostCreditRequestModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "Request"
        ],
        "summary": "Edit credit request",
        "operationId": "EditCreditRequest",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PutCreditRequestModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "tags": [
          "Request"
        ],
        "summary": "Get all credit requests",
        "description": "result csv map : Id, RequestDate, ExpireDate, RequestedAmount, AllocatedAmount, CreditType, SettlementType, State, StateTitle, IsExternal",
        "operationId": "GetAllCreditRequests",
        "parameters": [
          {
            "name": "fromDate",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page Number (default: 1)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page Size (default: 20)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/request/credit-request/{requestId}": {
      "delete": {
        "tags": [
          "Request"
        ],
        "summary": "Cancel credit request",
        "operationId": "RemoveCreditRequest",
        "parameters": [
          {
            "name": "requestId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/request/credit/summary": {
      "get": {
        "tags": [
          "Request"
        ],
        "summary": "Customer finance summary",
        "description": "result csv map: FinancialRemain, RemainWithoutLastTrade, AllocatedCredit, RemainCredit, AccountState, Deficit, PortfoMarketValue, ValueGuarantee, SalableAmountOfAsset, HasContract",
        "operationId": "CustomerSummary",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/request/credit/has-contract": {
      "get": {
        "tags": [
          "Request"
        ],
        "summary": "Get customer has credit contract",
        "operationId": "HasCreditContract",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/request/credit/contract": {
      "get": {
        "tags": [
          "Request"
        ],
        "summary": "Get credit contract",
        "operationId": "GetCreditContract",
        "parameters": [
          {
            "name": "htmlVersion",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/request/credit/sign-contract": {
      "post": {
        "tags": [
          "Request"
        ],
        "summary": "Sign credit contract",
        "operationId": "SignCreditContract",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/request/offline-order": {
      "get": {
        "tags": [
          "Request"
        ],
        "summary": "Get offline order request",
        "description": "result csv map : Id, Isin, InstrumentName, OrderSide, EntryDate, ActiveToDate, Price, Quantity, StateId, StateTitle, IsSign, Description, FaileDescription",
        "operationId": "GetOfflineOrder",
        "parameters": [
          {
            "name": "fromDate",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page Number (default: 1)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page Size (default: 20)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "Request"
        ],
        "summary": "Create new offline order request",
        "operationId": "CreateOfflineOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PostOfflineOrder"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "Request"
        ],
        "summary": "Update offline order request",
        "operationId": "UpdateOfflineOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PutOfflineOrder"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/request/offline-order/{id}/sign": {
      "put": {
        "tags": [
          "Request"
        ],
        "summary": "Sign offline order request",
        "operationId": "SignOfflineOrder",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/request/offline-order/{id}": {
      "delete": {
        "tags": [
          "Request"
        ],
        "summary": "Delete offline order",
        "operationId": "DeleteOfflineOrder",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/request/auto-fund": {
      "get": {
        "tags": [
          "Request"
        ],
        "summary": "Get auto-fund request",
        "description": "result csv map : Id, RequestDate, State, StateTitle",
        "operationId": "GetAutoFundRequest",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page Number (default: 1)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page Size (default: 20)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "Request"
        ],
        "summary": "Start new auto-fund request",
        "operationId": "StartAutoFundRequest",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/request/auto-fund/contract": {
      "get": {
        "tags": [
          "Request"
        ],
        "summary": "Get auto-fund contract",
        "operationId": "GetAutoFundContract",
        "parameters": [
          {
            "name": "htmlVersion",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/request/auto-fund/{id}/history": {
      "get": {
        "tags": [
          "Request"
        ],
        "summary": "Get auto-fund request history",
        "description": "result csv map : Id, ChangeDate, State, StateTitle, Description",
        "operationId": "GetAutoFundRequestHistory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/request/auto-fund/{id}/cancel": {
      "put": {
        "tags": [
          "Request"
        ],
        "summary": "Cancel auto-fund request",
        "operationId": "CancelAutoFundRequest",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/request/auto-fund/{id}/close": {
      "put": {
        "tags": [
          "Request"
        ],
        "summary": "Close auto-fund request",
        "operationId": "CloseAutoFundRequest",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/request/transfer": {
      "get": {
        "tags": [
          "Request"
        ],
        "summary": "Get transfer amount request",
        "description": "result csv map : Id,InvestorName,NationalCode,Amount,TransferType,ChangeDate,State",
        "operationId": "GetTransfer",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/request/transfer-child": {
      "post": {
        "tags": [
          "Request"
        ],
        "summary": "Add transfer deposit to child amount request",
        "operationId": "AddTransferDepositToChild",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TransferDepositModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/request/transfer-parent": {
      "post": {
        "tags": [
          "Request"
        ],
        "summary": "Add transfer deposit to parent amount request",
        "operationId": "AddTransferDepositToParent",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TransferDepositModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/user-setting/global": {
      "get": {
        "tags": [
          "UserSetting"
        ],
        "summary": "get all user global setting",
        "description": "result map : code, value",
        "operationId": "GetAllUserGlobal",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/user-setting/global/{code}": {
      "get": {
        "tags": [
          "UserSetting"
        ],
        "summary": "get user global setting",
        "operationId": "GetUserGlobal",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "theme|notif-corner|lang|confirm|.....",
            "required": true,
            "schema": {
              "maxLength": 25,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/user-setting/global/{code}/{value}": {
      "post": {
        "tags": [
          "UserSetting"
        ],
        "summary": "set user global setting",
        "operationId": "SetUserGlobal",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "maxLength": 25,
              "type": "string"
            }
          },
          {
            "name": "value",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/user-setting/chart-tv-global": {
      "get": {
        "tags": [
          "UserSetting"
        ],
        "summary": "get global trading view chart setting on json format",
        "operationId": "GetChartTVGlobal",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "UserSetting"
        ],
        "summary": "Save global trading view chart setting on json format",
        "operationId": "SetChartTVGlobal",
        "requestBody": {
          "description": "",
          "content": {
            "text/plain": {
              "schema": {
                "type": "string"
              }
            },
            "application/octet-stream": {
              "schema": {
                "type": "string"
              }
            },
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "text/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/user-setting/chart-tv-layout": {
      "get": {
        "tags": [
          "UserSetting"
        ],
        "summary": "Get all trading view chart layout",
        "operationId": "GetAllChartTVLayout",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "UserSetting"
        ],
        "summary": "Save trading view chart layout",
        "operationId": "SetChartTVLayout",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TVLayout"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/user-setting/chart-tv-layout/{id}": {
      "get": {
        "tags": [
          "UserSetting"
        ],
        "summary": "get trading view chart layout",
        "operationId": "GetChartTVLayout",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "UserSetting"
        ],
        "summary": "Delete trading view chart layout",
        "operationId": "DeleteChartTVLayout",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/user-setting/chart-tv-template": {
      "get": {
        "tags": [
          "UserSetting"
        ],
        "summary": "Get all trading view  chart template",
        "operationId": "GetAllChartTVTemplate",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "UserSetting"
        ],
        "summary": "Save trading view chart Template",
        "operationId": "SetChartTVTemplate",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TVTemplate"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/user-setting/chart-tv-template/{name}": {
      "get": {
        "tags": [
          "UserSetting"
        ],
        "summary": "Get trading view  chart template",
        "operationId": "GetChartTVTemplate",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "maxLength": 125,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "UserSetting"
        ],
        "summary": "Delete trading view chart Template",
        "operationId": "DeleteChartTVTemplate",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "maxLength": 125,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/user-setting/chart-iq-template": {
      "get": {
        "tags": [
          "UserSetting"
        ],
        "summary": "get chartiq template",
        "operationId": "GetAllChartIQTemplate",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "UserSetting"
        ],
        "summary": "Save chartiq Template",
        "operationId": "SetChartIQTemplate",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/IQTemplate"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/user-setting/chart-iq-template/{name}": {
      "get": {
        "tags": [
          "UserSetting"
        ],
        "summary": "get chartiq template",
        "operationId": "GetChartIQTemplate",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "maxLength": 125,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "UserSetting"
        ],
        "summary": "Delete chartiq Template",
        "operationId": "DeleteChartIQTemplate",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "maxLength": 125,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/user-setting/portfolio-tp-sl": {
      "get": {
        "tags": [
          "UserSetting"
        ],
        "summary": "get all portfolio tp/sl",
        "description": "result map : isin, tp|sl, price",
        "operationId": "GetAllPortolioTPSL",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/user-setting/portfolio-tp-sl/{isin}": {
      "get": {
        "tags": [
          "UserSetting"
        ],
        "summary": "get portfolio symbol tp/sl",
        "description": "result map : tp price, sl price",
        "operationId": "GetPortolioTPSL",
        "parameters": [
          {
            "name": "isin",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "maxLength": 12,
              "minLength": 12,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/user-setting/portfolio/{type}/{isin}/{price}": {
      "post": {
        "tags": [
          "UserSetting"
        ],
        "summary": "set user portfolio TP SL",
        "operationId": "SetPortolioTPSL",
        "parameters": [
          {
            "name": "isin",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "maxLength": 12,
              "minLength": 12,
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "path",
            "description": "tp|sl",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "price",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/wallet/buying-power": {
      "get": {
        "tags": [
          "Wallet"
        ],
        "summary": "Get user wallet and portfolio",
        "description": "Result model map: PortfolioValue, ProfitLoss, Percent, BuyingPower, CreditRemain, FinancialRemain, PurchaseUpperBound, BlockedValue, Credit, RemainT1, RemainT2, RemainWithoutLastTrade",
        "operationId": "GetBuyingPower",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/wallet/withdrawable": {
      "get": {
        "tags": [
          "Wallet"
        ],
        "summary": "Get withdrawable(t0) amount",
        "operationId": "GetT0",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/wallet/history": {
      "get": {
        "tags": [
          "Wallet"
        ],
        "summary": "Get Balance sheet for today",
        "description": "data map: Id, InstrumentName, ReportDate, CsTypeName, CsTypeId, Comments, Quantity, Price, Debt, Credit, Remain, Branch, BranchId",
        "operationId": "GetTodayHistory",
        "parameters": [
          {
            "name": "isAggregate",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page Number (default: 1)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page Size (default: 20)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/wallet/history/{fromDate}/{toDate}": {
      "get": {
        "tags": [
          "Wallet"
        ],
        "summary": "Get Balance sheet from a certain date to another",
        "description": "data map: Id, InstrumentName, ReportDate, CsTypeName, CsTypeId, Comments, Quantity, Price, Debt, Credit, Remain, Branch, BranchId",
        "operationId": "GetHistoryReport",
        "parameters": [
          {
            "name": "fromDate",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "toDate",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "comment",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Array of TypeOfEvent\n\n1 = Buy (خرید)\n\n2 = Sell (فروش)\n\n3 = Withdrawal (برداشت وجه)\n\n4 = Deposit (واریز وجه)\n\n5 = WarrantDebit (بدهی تقدم)\n\n6 = Facilities (تسهیلات)\n\n7 = WageDiff (تفاوت کارمزد)\n\n8 = WageDiscount (تخفیف کارمزد)",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/BrifTypeOfEvent"
              }
            }
          },
          {
            "name": "isAggregate",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page Number (default: 1)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page Size (default: 20)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/wallet/history-summary/{fromDate}/{toDate}": {
      "get": {
        "tags": [
          "Wallet"
        ],
        "summary": "Get Balance sheet summary",
        "description": "result csv map : TotalCredit, TotalDebt, TotalRemain, FinalRemain, totalWithoutRemain",
        "operationId": "GetHistoryReportSummary",
        "parameters": [
          {
            "name": "fromDate",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "toDate",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "comment",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "\n\n1 = Buy (خرید)\n\n2 = Sell (فروش)\n\n3 = Withdrawal (برداشت وجه)\n\n4 = Deposit (واریز وجه)\n\n5 = WarrantDebit (بدهی تقدم)\n\n6 = Facilities (تسهیلات)\n\n7 = WageDiff (تفاوت کارمزد)\n\n8 = WageDiscount (تخفیف کارمزد)",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/BrifTypeOfEvent"
              }
            }
          },
          {
            "name": "isAggregate",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/wallet/history/{exportType}/{fromDate}/{toDate}": {
      "get": {
        "tags": [
          "Wallet"
        ],
        "summary": "Balance sheet export to csv, excel, xml, pdf",
        "operationId": "GetHisoryExcelReport",
        "parameters": [
          {
            "name": "exportType",
            "in": "path",
            "description": "csv|excel|xml|pdf",
            "required": true,
            "schema": {
              "pattern": "^csv$|^excel$|^xml$|^pdf$",
              "type": "string"
            }
          },
          {
            "name": "fromDate",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "toDate",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "comment",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "\n\n1 = Buy (خرید)\n\n2 = Sell (فروش)\n\n3 = Withdrawal (برداشت وجه)\n\n4 = Deposit (واریز وجه)\n\n5 = WarrantDebit (بدهی تقدم)\n\n6 = Facilities (تسهیلات)\n\n7 = WageDiff (تفاوت کارمزد)\n\n8 = WageDiscount (تخفیف کارمزد)",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/BrifTypeOfEvent"
              }
            }
          },
          {
            "name": "isAggregate",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/wallet/type-of-event": {
      "get": {
        "tags": [
          "Wallet"
        ],
        "summary": "Get type of event history",
        "operationId": "GetTypeOfEvent",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/watchlist/user": {
      "get": {
        "tags": [
          "WatchList"
        ],
        "summary": "Get user watchlist",
        "description": "result data map : Id, Name, Note, Type",
        "operationId": "GetUserWatchList",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "WatchList"
        ],
        "summary": "Add user watchlist",
        "operationId": "AddWatchList",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/WatchListModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "WatchList"
        ],
        "summary": "Update user watchlist",
        "operationId": "UpdateWatchList",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/WatchListUpdateModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/watchlist/user-has-item": {
      "get": {
        "tags": [
          "WatchList"
        ],
        "summary": "Get user watchlist determin has item",
        "description": "result data map : Id, Name, Added",
        "operationId": "GetWatchListThatHasItem",
        "parameters": [
          {
            "name": "isin",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/watchlist/user/{watchListId}/item": {
      "get": {
        "tags": [
          "WatchList"
        ],
        "summary": "Get user watchlist item",
        "description": "result data map : Isin, InstrumentName,ClosingPrice,ClosingPricePercent,LastTradePrice,LastTradePricePercent,History,InstrumentStateCode,InstrumentStateTitle, \r\nTotalNumberOfSharesTraded, TotalTradeValue,TotalNumberOfTrades,BaseVolume,\r\nYesterdayPrice,FirstTradedPrice,UpperTradePrice,LowestTradePrice\r\nAskPrice, AskQuantity, AskNumber, BidPrice, BidQuantity, BidNumber,\r\nAssetQuantity",
        "operationId": "GetUserWatchListItem",
        "parameters": [
          {
            "name": "watchListId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SortModel"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/watchlist/user/{watchListId}/{isin}": {
      "post": {
        "tags": [
          "WatchList"
        ],
        "summary": "Add user watchlist item",
        "operationId": "AddWatchListItem",
        "parameters": [
          {
            "name": "watchListId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "isin",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "maxLength": 12,
              "minLength": 12,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "WatchList"
        ],
        "summary": "Delete user wathlist item",
        "operationId": "DeleteWatchListItem",
        "parameters": [
          {
            "name": "watchListId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "isin",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "maxLength": 12,
              "minLength": 12,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/watchlist/user/{watchListId}": {
      "delete": {
        "tags": [
          "WatchList"
        ],
        "summary": "Delete user watchlist",
        "operationId": "DeleteWatchList",
        "parameters": [
          {
            "name": "watchListId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/watchlist/portfolio/item": {
      "get": {
        "tags": [
          "WatchList"
        ],
        "summary": "Get user portfolio watchlist item",
        "description": "result data map : Isin, InstrumentName, ClosingPrice, ClosingPricePercent, LastPrice, LastPricePercent, AssetQuantity, History, InstrumentStateCode, InstrumentStateTitle\r\nIsin, InstrumentName,ClosingPrice,ClosingPricePercent,LastTradePrice,LastTradePricePercent,Quantity,History,InstrumentStateCode,InstrumentStateTitle, \r\nTotalNumberOfSharesTraded, TotalTradeValue,TotalNumberOfTrades,BaseVolume,\r\nYesterdayPrice,FirstTradedPrice,UpperTradePrice,LowestTradePrice\r\nAskPrice, AskQuantity, AskNumber, BidPrice, BidQuantity, BidNumber,",
        "operationId": "GetPortfolioWatchListItem",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page Number (default: 1)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page Size (default: 20)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Sorting",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SortModel"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/watchlist/portfolio-ex/item": {
      "get": {
        "tags": [
          "WatchList"
        ],
        "summary": "Get user portfolio extended watchlist item",
        "description": "result data map : Isin, InstrumentName, ClosingPrice, ClosingPricePercent, LastPrice, LastPricePercent, History, InstrumentStateCode, InstrumentStateTitle, AveragePrice, Quantity, BuyCostBasis, BreakEvenPoint, ProfitLoss, ProfitLossPercent, Value, PecentOfTotal, SellWage\r\n\r\nFormulas :\r\n            \r\n    Value = Quantity * LastPrice - (Quantity * LastPrice * SellWage) \r\n    ProfitLoss = Value - BuyCostBasis \r\n    ProfitLossPercent = (ProfitLoss / BuyCostBasis) * 100 \r\n    Total Value = Sum(Value) \r\n    Total ProfitLoss = Sum(ProfitLoss) \r\n    Total ProfitLossPercent = (TotalValue / TotalProfitLoss) * 100",
        "operationId": "GetPortfolioExWatchListItem",
        "parameters": [
          {
            "name": "timeframe",
            "in": "query",
            "description": "1d|1w|1m",
            "schema": {
              "type": "string",
              "default": "1d"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page Number (default: 1)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page Size (default: 20)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Sorting",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SortModel"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/watchlist/system": {
      "get": {
        "tags": [
          "WatchList"
        ],
        "summary": "Get system watchlist",
        "description": "result data map : Id, Name, Note, Type",
        "operationId": "GetSystemWatchList",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/watchlist/system/{watchListId}/item": {
      "get": {
        "tags": [
          "WatchList"
        ],
        "summary": "Get system watchlist item",
        "description": "result data map : Isin, InstrumentName,ClosingPrice,ClosingPricePercent,LastTradePrice,LastTradePricePercent,History,InstrumentStateCode,InstrumentStateTitle, \r\nTotalNumberOfSharesTraded, TotalTradeValue,TotalNumberOfTrades,BaseVolume,\r\nYesterdayPrice,FirstTradedPrice,UpperTradePrice,LowestTradePrice\r\nAskPrice, AskQuantity, AskNumber, BidPrice, BidQuantity, BidNumber,\r\nAssetQuantity",
        "operationId": "GetSystemWatchListItem",
        "parameters": [
          {
            "name": "watchListId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SortModel"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/watchlist/line-chart/{timeframe}/{isin}": {
      "get": {
        "tags": [
          "WatchList"
        ],
        "summary": "Get Watchlist item linechart data",
        "operationId": "GetItemLineChart",
        "parameters": [
          {
            "name": "isin",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "maxLength": 12,
              "minLength": 12,
              "type": "string"
            }
          },
          {
            "name": "timeframe",
            "in": "path",
            "description": "1d|1w|1m",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AssetType": {
        "enum": [
          1,
          2
        ],
        "type": "integer",
        "description": "\n\n1 = Share\n\n2 = Option",
        "format": "int32",
        "x-enumNames": [
          "Share",
          "Option"
        ],
        "x-enumDescriptions": [
          "",
          ""
        ]
      },
      "BasePriceType": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "description": "\n\n0 = Auto\n\n1 = LastPrice\n\n2 = ClosingPrice",
        "format": "int32",
        "x-enumNames": [
          "Auto",
          "LastPrice",
          "ClosingPrice"
        ],
        "x-enumDescriptions": [
          "",
          "",
          ""
        ]
      },
      "BrifTypeOfEvent": {
        "enum": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8
        ],
        "type": "integer",
        "description": "\n\n1 = Buy (خرید)\n\n2 = Sell (فروش)\n\n3 = Withdrawal (برداشت وجه)\n\n4 = Deposit (واریز وجه)\n\n5 = WarrantDebit (بدهی تقدم)\n\n6 = Facilities (تسهیلات)\n\n7 = WageDiff (تفاوت کارمزد)\n\n8 = WageDiscount (تخفیف کارمزد)",
        "format": "int32",
        "x-enumNames": [
          "Buy",
          "Sell",
          "Withdrawal",
          "Deposit",
          "WarrantDebit",
          "Facilities",
          "WageDiff",
          "WageDiscount"
        ],
        "x-enumDescriptions": [
          "خرید",
          "فروش",
          "برداشت وجه",
          "واریز وجه",
          "بدهی تقدم",
          "تسهیلات",
          "تفاوت کارمزد",
          "تخفیف کارمزد"
        ]
      },
      "ChangePasswordModel": {
        "required": [
          "newPass",
          "oldPass"
        ],
        "type": "object",
        "properties": {
          "oldPass": {
            "minLength": 1,
            "type": "string"
          },
          "newPass": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "ChangeSupervisorRequestModel": {
        "required": [
          "isin"
        ],
        "type": "object",
        "properties": {
          "isin": {
            "maxLength": 12,
            "minLength": 12,
            "type": "string",
            "default": ""
          },
          "comments": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ChangeUserNameModel": {
        "required": [
          "currentPassword",
          "newUserName"
        ],
        "type": "object",
        "properties": {
          "newUserName": {
            "maxLength": 12,
            "minLength": 5,
            "type": "string"
          },
          "currentPassword": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "ContinuosWithdrawalModel": {
        "required": [
          "amount",
          "customerBankAccountId"
        ],
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "valueType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ValueType"
              }
            ],
            "description": "\n\n1 = Amount\n\n2 = Percent",
            "x-enumNames": [
              "Amount",
              "Percent"
            ],
            "x-enumDescriptions": [
              "",
              ""
            ]
          },
          "rangeType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RangeType"
              }
            ],
            "description": "\n\n1 = Weekly\n\n2 = Monthly",
            "x-enumNames": [
              "Weekly",
              "Monthly"
            ],
            "x-enumDescriptions": [
              "",
              ""
            ]
          },
          "amount": {
            "maximum": 1000000000000000,
            "minimum": 1,
            "type": "number",
            "format": "decimal"
          },
          "payCount": {
            "maximum": 36,
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "default": 12
          },
          "customerBankAccountId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "CreditType": {
        "enum": [
          1,
          2
        ],
        "type": "integer",
        "description": "\n\n1 = Daily\n\n2 = Yearly",
        "format": "int32",
        "x-enumNames": [
          "Daily",
          "Yearly"
        ],
        "x-enumDescriptions": [
          "",
          ""
        ]
      },
      "CustomerType": {
        "enum": [
          1,
          2
        ],
        "type": "integer",
        "description": "\n\n1 = Individual (An Individual (حقیقی))\n\n2 = Firm (A Firm (حقوقی))",
        "format": "int32",
        "x-enumNames": [
          "Individual",
          "Firm"
        ],
        "x-enumDescriptions": [
          "An Individual (حقیقی)",
          "A Firm (حقوقی)"
        ]
      },
      "DepositType": {
        "enum": [
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "description": "\n\n1 = Receipt\n\n2 = Satna\n\n3 = Paya\n\n4 = Internet\n\n5 = Pos\n\n6 = GateWay",
        "format": "int32",
        "x-enumNames": [
          "Receipt",
          "Satna",
          "Paya",
          "Internet",
          "Pos",
          "GateWay"
        ],
        "x-enumDescriptions": [
          "",
          "",
          "",
          "",
          "",
          ""
        ]
      },
      "DirectionType": {
        "enum": [
          1,
          2
        ],
        "type": "integer",
        "description": "\n\n1 = Input\n\n2 = Output",
        "format": "int32",
        "x-enumNames": [
          "Input",
          "Output"
        ],
        "x-enumDescriptions": [
          "",
          ""
        ]
      },
      "EPaymentModel": {
        "required": [
          "amount",
          "callback",
          "ePaymentGatewayId"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "maximum": 100000000000,
            "minimum": 1,
            "type": "number",
            "format": "decimal"
          },
          "ePaymentGatewayId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GatewayType"
              }
            ],
            "description": "\n\n1 = Jibit\n\n2 = Saman\n\n3 = Pasargod\n\n4 = Melli\n\n5 = IranKish\n\n6 = Parsian",
            "x-enumNames": [
              "Jibit",
              "Saman",
              "Pasargod",
              "Melli",
              "IranKish",
              "Parsian"
            ],
            "x-enumDescriptions": [
              "",
              "",
              "",
              "",
              "",
              ""
            ]
          },
          "callback": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "ExchangeType": {
        "enum": [
          0,
          1,
          2,
          3,
          4
        ],
        "type": "integer",
        "description": "\n\n0 = None\n\n1 = TSE (بورس)\n\n2 = OTC (فرابورس)\n\n3 = IME (بورس کالا)\n\n4 = IRENEX (بورس انرژی)",
        "format": "int32",
        "x-enumNames": [
          "None",
          "TSE",
          "OTC",
          "IME",
          "IRENEX"
        ],
        "x-enumDescriptions": [
          "",
          "بورس",
          "فرابورس",
          "بورس کالا",
          "بورس انرژی"
        ]
      },
      "ForgetPasswordModel": {
        "required": [
          "captchaCode",
          "captchaId",
          "mobile",
          "nationalCode"
        ],
        "type": "object",
        "properties": {
          "nationalCode": {
            "minLength": 1,
            "type": "string"
          },
          "mobile": {
            "minLength": 1,
            "type": "string"
          },
          "captchaCode": {
            "minLength": 1,
            "type": "string"
          },
          "captchaId": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "GatewayType": {
        "enum": [
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "description": "\n\n1 = Jibit\n\n2 = Saman\n\n3 = Pasargod\n\n4 = Melli\n\n5 = IranKish\n\n6 = Parsian",
        "format": "int32",
        "x-enumNames": [
          "Jibit",
          "Saman",
          "Pasargod",
          "Melli",
          "IranKish",
          "Parsian"
        ],
        "x-enumDescriptions": [
          "",
          "",
          "",
          "",
          "",
          ""
        ]
      },
      "IQTemplate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "content": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IndexDataType": {
        "enum": [
          1,
          2,
          3,
          4
        ],
        "type": "integer",
        "description": "\n\n1 = Number\n\n2 = Quantity\n\n3 = Volume\n\n4 = Value",
        "format": "int32",
        "x-enumNames": [
          "Number",
          "Quantity",
          "Volume",
          "Value"
        ],
        "x-enumDescriptions": [
          "",
          "",
          "",
          ""
        ]
      },
      "InstrumentType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          16,
          17,
          18,
          19,
          20,
          21,
          22,
          23,
          24,
          25,
          26,
          27,
          28,
          29,
          30
        ],
        "type": "integer",
        "description": "\n\n0 = None\n\n1 = SH (سهام)\n\n2 = FUN (صندوق سهامی)\n\n3 = FUNMIX (صندوق مختلط)\n\n4 = FUNFIX (صندوق ثابت)\n\n5 = FUNBUL (صندوق زمین و ساختمان)\n\n6 = FUNBOLD (صندوق جسورانه)\n\n7 = WAR (حق تقدم)\n\n8 = OPT (اختیار معامله)\n\n9 = SELLOPT (اختیار تبعی)\n\n10 = BON (اوراق قرضه)\n\n11 = DEP (گواهی سپرده سرمایه گذاری)\n\n12 = FUT (آتی)\n\n13 = BFUT (آتی سبد)\n\n14 = SHBASE (بازار پایه)\n\n15 = BONWARBLD (اوراق حق تقدم استفاده از تسهیلات مسکن)\n\n16 = IPR (دارایی فکری)\n\n17 = SALAF (اوراق سلف موازی استاندارد)\n\n18 = METPET (کالا محصولات فلزی و پتروشیمی)\n\n19 = CORPS (کالا محصولات کشاورزی)\n\n20 = IMPROP (کالا اموال غیرمنقول در بازار فرعی)\n\n21 = MDEP (گواهی سپرده کالایی)\n\n22 = MDEPGC (گواهی سپرده کالایی سکه طلا)\n\n23 = ENGMER (معاملات کالاها)\n\n24 = SALAFPHZPOW (انرژی  سلف موازی; فیزیکی - برقا)\n\n25 = PRJFUND (انرژی  صندوق های پروژه)\n\n26 = CapCert (انرژی  اوراق گواهی ظرفیت)\n\n27 = FUNDINFUND (صندوق در صندوق)\n\n28 = FUNDPRIVATE (صندوق شخصی)\n\n29 = RELES (.املاك ومستغلات)\n\n30 = MDEPDIS (گواهی سپرده کالایی ناپیوسته)",
        "format": "int32",
        "x-enumNames": [
          "None",
          "SH",
          "FUN",
          "FUNMIX",
          "FUNFIX",
          "FUNBUL",
          "FUNBOLD",
          "WAR",
          "OPT",
          "SELLOPT",
          "BON",
          "DEP",
          "FUT",
          "BFUT",
          "SHBASE",
          "BONWARBLD",
          "IPR",
          "SALAF",
          "METPET",
          "CORPS",
          "IMPROP",
          "MDEP",
          "MDEPGC",
          "ENGMER",
          "SALAFPHZPOW",
          "PRJFUND",
          "CapCert",
          "FUNDINFUND",
          "FUNDPRIVATE",
          "RELES",
          "MDEPDIS"
        ],
        "x-enumDescriptions": [
          "",
          "سهام",
          "صندوق سهامی",
          "صندوق مختلط",
          "صندوق ثابت",
          "صندوق زمین و ساختمان",
          "صندوق جسورانه",
          "حق تقدم",
          "اختیار معامله",
          "اختیار تبعی",
          "اوراق قرضه",
          "گواهی سپرده سرمایه گذاری",
          "آتی",
          "آتی سبد",
          "بازار پایه",
          "اوراق حق تقدم استفاده از تسهیلات مسکن",
          "دارایی فکری",
          "اوراق سلف موازی استاندارد",
          "کالا محصولات فلزی و پتروشیمی",
          "کالا محصولات کشاورزی",
          "کالا اموال غیرمنقول در بازار فرعی",
          "گواهی سپرده کالایی",
          "گواهی سپرده کالایی سکه طلا",
          "معاملات کالاها",
          "انرژی  سلف موازی; فیزیکی - برقا",
          "انرژی  صندوق های پروژه",
          "انرژی  اوراق گواهی ظرفیت",
          "صندوق در صندوق",
          "صندوق شخصی",
          ".املاك ومستغلات",
          "گواهی سپرده کالایی ناپیوسته"
        ]
      },
      "IpoOrderModel": {
        "required": [
          "isin",
          "quantity"
        ],
        "type": "object",
        "properties": {
          "isin": {
            "maxLength": 12,
            "minLength": 12,
            "type": "string",
            "default": ""
          },
          "quantity": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "price": {
            "type": "number",
            "format": "decimal",
            "default": 0,
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IpoOrderRequestModel": {
        "required": [
          "isin",
          "quantity"
        ],
        "type": "object",
        "properties": {
          "isin": {
            "maxLength": 12,
            "minLength": 12,
            "type": "string",
            "default": ""
          },
          "quantity": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "price": {
            "type": "number",
            "format": "decimal",
            "default": 0,
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IpoState": {
        "enum": [
          1,
          2,
          3
        ],
        "type": "integer",
        "description": "\n\n1 = Pending\n\n2 = Executed\n\n3 = Failed",
        "format": "int32",
        "x-enumNames": [
          "Pending",
          "Executed",
          "Failed"
        ],
        "x-enumDescriptions": [
          "",
          "",
          ""
        ]
      },
      "MapSort": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "description": "\n\n0 = NoSort (بدون دسته بندی)\n\n1 = StockType (نوع سهام)\n\n2 = ExchangeType (نوع بازار)\n\n3 = TradeVolume (حجم معاملات حقیقی و حقوقی)\n\n4 = PriceChange (تغییر قیمت)\n\n5 = IndustryGroup (گروه های صنعت)\n\n6 = IndustrySubGroups (زیر گروه های صنعت)",
        "format": "int32",
        "x-enumNames": [
          "NoSort",
          "StockType",
          "ExchangeType",
          "TradeVolume",
          "PriceChange",
          "IndustryGroup",
          "IndustrySubGroups"
        ],
        "x-enumDescriptions": [
          "بدون دسته بندی",
          "نوع سهام",
          "نوع بازار",
          "حجم معاملات حقیقی و حقوقی",
          "تغییر قیمت",
          "گروه های صنعت",
          "زیر گروه های صنعت"
        ]
      },
      "MapTimeFrame": {
        "enum": [
          1,
          2,
          3
        ],
        "type": "integer",
        "description": "\n\n1 = Day (روز)\n\n2 = Week (هفته)\n\n3 = Month (ماه)",
        "format": "int32",
        "x-enumNames": [
          "Day",
          "Week",
          "Month"
        ],
        "x-enumDescriptions": [
          "روز",
          "هفته",
          "ماه"
        ]
      },
      "MarketSort": {
        "enum": [
          1,
          2,
          3
        ],
        "type": "integer",
        "description": "\n\n1 = Value (The Value (ارزش))\n\n2 = Volume (The Volume (حجم))\n\n3 = Visit (The Amount of Visits (بازدید))",
        "format": "int32",
        "x-enumNames": [
          "Value",
          "Volume",
          "Visit"
        ],
        "x-enumDescriptions": [
          "The Value (ارزش)",
          "The Volume (حجم)",
          "The Amount of Visits (بازدید)"
        ]
      },
      "MarketType": {
        "enum": [
          0,
          1,
          2,
          3,
          4
        ],
        "type": "integer",
        "description": "\n\n0 = None\n\n1 = Normal (اصلی)\n\n2 = OddLot (خرده فروشی)\n\n3 = BuyingIn (جبرانی)\n\n4 = Block (عمده)",
        "format": "int32",
        "x-enumNames": [
          "None",
          "Normal",
          "OddLot",
          "BuyingIn",
          "Block"
        ],
        "x-enumDescriptions": [
          "",
          "اصلی",
          "خرده فروشی",
          "جبرانی",
          "عمده"
        ]
      },
      "OfflineDepositModel": {
        "required": [
          "amount",
          "attachmentContent",
          "depositDate",
          "sourceId"
        ],
        "type": "object",
        "properties": {
          "sourceId": {
            "type": "string",
            "format": "uuid"
          },
          "amount": {
            "maximum": 1000000000000000,
            "minimum": 1,
            "type": "number",
            "format": "decimal",
            "default": 0
          },
          "depositDate": {
            "type": "string",
            "format": "date-time"
          },
          "depositType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DepositType"
              }
            ],
            "description": "\n\n1 = Receipt\n\n2 = Satna\n\n3 = Paya\n\n4 = Internet\n\n5 = Pos\n\n6 = GateWay",
            "x-enumNames": [
              "Receipt",
              "Satna",
              "Paya",
              "Internet",
              "Pos",
              "GateWay"
            ],
            "x-enumDescriptions": [
              "",
              "",
              "",
              "",
              "",
              ""
            ]
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "attachmentContent": {
            "maxLength": 512000,
            "minLength": 1,
            "type": "string"
          },
          "traceNumber": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrderBatchUpdateModel": {
        "required": [
          "price"
        ],
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "nullable": true
          },
          "price": {
            "maximum": 1000000000,
            "minimum": 1,
            "type": "number",
            "format": "decimal",
            "default": 0
          }
        },
        "additionalProperties": false
      },
      "OrderModel": {
        "required": [
          "isin",
          "orderSide",
          "price",
          "quantity"
        ],
        "type": "object",
        "properties": {
          "isin": {
            "maxLength": 12,
            "minLength": 12,
            "type": "string",
            "default": ""
          },
          "quantity": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "price": {
            "maximum": 1000000000,
            "minimum": 1,
            "type": "number",
            "format": "decimal",
            "default": 0
          },
          "validityType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ValidityType"
              }
            ],
            "description": "\n\n1 = Day (Day)\n\n2 = GoodTillCanceld (Good until canceled)\n\n3 = GooTillDate (Good until date)\n\n4 = FiilOrKill (Fill or Kill)",
            "x-enumNames": [
              "Day",
              "GoodTillCanceld",
              "GooTillDate",
              "FiilOrKill"
            ],
            "x-enumDescriptions": [
              "Day",
              "Good until canceled",
              "Good until date",
              "Fill or Kill"
            ]
          },
          "validityDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "orderSide": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OrderSide"
              }
            ],
            "description": "\n\n1 = Buy (Buy)\n\n2 = Sell (Sell)",
            "x-enumNames": [
              "Buy",
              "Sell"
            ],
            "x-enumDescriptions": [
              "Buy",
              "Sell"
            ]
          },
          "checkSum": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrderSide": {
        "enum": [
          1,
          2
        ],
        "type": "integer",
        "description": "\n\n1 = Buy (Buy)\n\n2 = Sell (Sell)",
        "format": "int32",
        "x-enumNames": [
          "Buy",
          "Sell"
        ],
        "x-enumDescriptions": [
          "Buy",
          "Sell"
        ]
      },
      "OrderState": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          16,
          17,
          18
        ],
        "type": "integer",
        "description": "\n\n0 = None\n\n1 = Pending\n\n2 = Sending\n\n3 = Sent\n\n4 = Confirmed\n\n5 = Error\n\n6 = ExecutedAndConfirmed\n\n7 = ExecutedAndCancelled\n\n8 = Executed\n\n9 = ExecutedAndModified\n\n10 = PendingCancellation\n\n11 = Cancelled\n\n12 = PendingModification\n\n13 = ConfirmedModify\n\n14 = Modified\n\n15 = RejectModifyOrder\n\n16 = Deactivated\n\n17 = ModifySent\n\n18 = CancelSent",
        "format": "int32",
        "x-enumNames": [
          "None",
          "Pending",
          "Sending",
          "Sent",
          "Confirmed",
          "Error",
          "ExecutedAndConfirmed",
          "ExecutedAndCancelled",
          "Executed",
          "ExecutedAndModified",
          "PendingCancellation",
          "Cancelled",
          "PendingModification",
          "ConfirmedModify",
          "Modified",
          "RejectModifyOrder",
          "Deactivated",
          "ModifySent",
          "CancelSent"
        ],
        "x-enumDescriptions": [
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          ""
        ]
      },
      "PercentageRangeType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11
        ],
        "type": "integer",
        "description": "\n\n0 = None\n\n1 = AbouveFive (From +5 to infinity)\n\n2 = plusFour (From +4 to +5)\n\n3 = PlusThree (From +3 to +4)\n\n4 = plusTwo (From +2 to +3)\n\n5 = PlusOne (From +1 to +2)\n\n6 = Zero (Between -1..+1)\n\n7 = MinusOne (From -1 to -2)\n\n8 = MinusTwo (From -2 to -3)\n\n9 = MinusThree (From -3 to -4)\n\n10 = MinusFour (From -4 to -5)\n\n11 = BelowMinusFive (From -5 to infinity)",
        "format": "int32",
        "x-enumNames": [
          "None",
          "AbouveFive",
          "plusFour",
          "PlusThree",
          "plusTwo",
          "PlusOne",
          "Zero",
          "MinusOne",
          "MinusTwo",
          "MinusThree",
          "MinusFour",
          "BelowMinusFive"
        ],
        "x-enumDescriptions": [
          "",
          "From +5 to infinity",
          "From +4 to +5",
          "From +3 to +4",
          "From +2 to +3",
          "From +1 to +2",
          "Between -1..+1",
          "From -1 to -2",
          "From -2 to -3",
          "From -3 to -4",
          "From -4 to -5",
          "From -5 to infinity"
        ]
      },
      "PortfolioMapSort": {
        "enum": [
          0,
          1,
          2,
          3
        ],
        "type": "integer",
        "description": "\n\n0 = None (بدون دسته بندی)\n\n1 = Stock (نوع سهام)\n\n2 = Exchange (نوع بازار)\n\n3 = Industry (گروه های صنعت)",
        "format": "int32",
        "x-enumNames": [
          "None",
          "Stock",
          "Exchange",
          "Industry"
        ],
        "x-enumDescriptions": [
          "بدون دسته بندی",
          "نوع سهام",
          "نوع بازار",
          "گروه های صنعت"
        ]
      },
      "PostBankAccount": {
        "required": [
          "accountNumber",
          "bankAcountType",
          "bankId",
          "sheba"
        ],
        "type": "object",
        "properties": {
          "sheba": {
            "maxLength": 26,
            "minLength": 24,
            "type": "string"
          },
          "accountNumber": {
            "minLength": 1,
            "type": "string"
          },
          "bankAcountType": {
            "type": "integer",
            "format": "int32"
          },
          "bankId": {
            "type": "integer",
            "format": "int32"
          },
          "branchName": {
            "type": "string",
            "nullable": true
          },
          "branchCityId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "isDefault": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "PostCreditRequestModel": {
        "required": [
          "amount"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "maximum": 1000000000000000,
            "minimum": 1,
            "type": "number",
            "format": "decimal",
            "default": 0
          },
          "creditType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CreditType"
              }
            ],
            "description": "\n\n1 = Daily\n\n2 = Yearly",
            "x-enumNames": [
              "Daily",
              "Yearly"
            ],
            "x-enumDescriptions": [
              "",
              ""
            ]
          }
        },
        "additionalProperties": false
      },
      "PostDocumentRequestModel": {
        "required": [
          "content",
          "documentTypeId"
        ],
        "type": "object",
        "properties": {
          "content": {
            "maxLength": 512000,
            "minLength": 1,
            "type": "string"
          },
          "documentTypeId": {
            "maximum": 5,
            "minimum": 2,
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "PostNoteModel": {
        "required": [
          "instrumentName",
          "isin",
          "note",
          "title"
        ],
        "type": "object",
        "properties": {
          "isin": {
            "maxLength": 12,
            "minLength": 12,
            "type": "string",
            "default": ""
          },
          "instrumentName": {
            "minLength": 1,
            "type": "string"
          },
          "title": {
            "minLength": 1,
            "type": "string"
          },
          "note": {
            "minLength": 1,
            "type": "string"
          },
          "color": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PostOfflineOrder": {
        "required": [
          "isin",
          "price",
          "quantity"
        ],
        "type": "object",
        "properties": {
          "isin": {
            "maxLength": 12,
            "minLength": 12,
            "type": "string",
            "default": ""
          },
          "orderSide": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OrderSide"
              }
            ],
            "description": "\n\n1 = Buy (Buy)\n\n2 = Sell (Sell)",
            "x-enumNames": [
              "Buy",
              "Sell"
            ],
            "x-enumDescriptions": [
              "Buy",
              "Sell"
            ]
          },
          "price": {
            "minimum": 1,
            "type": "number",
            "format": "double",
            "default": 0
          },
          "quantity": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "activeToDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PreOrderCreatModel": {
        "required": [
          "isin",
          "orderSide",
          "price",
          "quantity"
        ],
        "type": "object",
        "properties": {
          "isin": {
            "maxLength": 12,
            "minLength": 12,
            "type": "string",
            "default": ""
          },
          "orderSide": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OrderSide"
              }
            ],
            "description": "\n\n1 = Buy (Buy)\n\n2 = Sell (Sell)",
            "x-enumNames": [
              "Buy",
              "Sell"
            ],
            "x-enumDescriptions": [
              "Buy",
              "Sell"
            ]
          },
          "price": {
            "minimum": 1,
            "type": "number",
            "format": "double",
            "default": 0
          },
          "quantity": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "validityType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ValidityType"
              }
            ],
            "description": "\n\n1 = Day (Day)\n\n2 = GoodTillCanceld (Good until canceled)\n\n3 = GooTillDate (Good until date)\n\n4 = FiilOrKill (Fill or Kill)",
            "x-enumNames": [
              "Day",
              "GoodTillCanceld",
              "GooTillDate",
              "FiilOrKill"
            ],
            "x-enumDescriptions": [
              "Day",
              "Good until canceled",
              "Good until date",
              "Fill or Kill"
            ]
          },
          "validityDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PreOrderModifyModel": {
        "required": [
          "id",
          "price",
          "quantity"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "price": {
            "minimum": 1,
            "type": "number",
            "format": "double",
            "default": 0
          },
          "quantity": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "validityType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ValidityType"
              }
            ],
            "description": "\n\n1 = Day (Day)\n\n2 = GoodTillCanceld (Good until canceled)\n\n3 = GooTillDate (Good until date)\n\n4 = FiilOrKill (Fill or Kill)",
            "x-enumNames": [
              "Day",
              "GoodTillCanceld",
              "GooTillDate",
              "FiilOrKill"
            ],
            "x-enumDescriptions": [
              "Day",
              "Good until canceled",
              "Good until date",
              "Fill or Kill"
            ]
          },
          "validityDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PriceMode": {
        "enum": [
          1,
          2
        ],
        "type": "integer",
        "description": "\n\n1 = Top (The Top closing (پر سود ترین))\n\n2 = Bottom (The bottom closing (ضررده ترین))",
        "format": "int32",
        "x-enumNames": [
          "Top",
          "Bottom"
        ],
        "x-enumDescriptions": [
          "The Top closing (پر سود ترین)",
          "The bottom closing (ضررده ترین)"
        ]
      },
      "PutCreditRequestModel": {
        "required": [
          "amount",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "amount": {
            "maximum": 1000000000000000,
            "minimum": 1,
            "type": "number",
            "format": "decimal",
            "default": 0
          },
          "creditType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CreditType"
              }
            ],
            "description": "\n\n1 = Daily\n\n2 = Yearly",
            "x-enumNames": [
              "Daily",
              "Yearly"
            ],
            "x-enumDescriptions": [
              "",
              ""
            ]
          }
        },
        "additionalProperties": false
      },
      "PutOfflineOrder": {
        "required": [
          "id",
          "price",
          "quantity"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "price": {
            "minimum": 1,
            "type": "number",
            "format": "double",
            "default": 0
          },
          "quantity": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "activeToDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RangeType": {
        "enum": [
          1,
          2
        ],
        "type": "integer",
        "description": "\n\n1 = Weekly\n\n2 = Monthly",
        "format": "int32",
        "x-enumNames": [
          "Weekly",
          "Monthly"
        ],
        "x-enumDescriptions": [
          "",
          ""
        ]
      },
      "RefreshTokenRequest": {
        "type": "object",
        "properties": {
          "refreshToken": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SortModel": {
        "type": "object",
        "properties": {
          "property": {
            "type": "string",
            "nullable": true
          },
          "direction": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SymbolQueueState": {
        "enum": [
          0,
          1,
          2,
          3,
          4
        ],
        "type": "integer",
        "description": "\n\n0 = None\n\n1 = BuyAhead\n\n2 = SellAhead\n\n3 = GoingToBuyAhead\n\n4 = GoingToSellAhead",
        "format": "int32",
        "x-enumNames": [
          "None",
          "BuyAhead",
          "SellAhead",
          "GoingToBuyAhead",
          "GoingToSellAhead"
        ],
        "x-enumDescriptions": [
          "",
          "",
          "",
          "",
          ""
        ]
      },
      "TVLayout": {
        "required": [
          "content",
          "name",
          "resolution",
          "symbol"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "resolution": {
            "minLength": 1,
            "type": "string"
          },
          "symbol": {
            "minLength": 1,
            "type": "string"
          },
          "timestamp": {
            "type": "integer",
            "format": "int64"
          },
          "content": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "TVTemplate": {
        "required": [
          "content",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "content": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "TransferDepositModel": {
        "required": [
          "amount",
          "toInvestorAccountCode",
          "toNationalCode"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "format": "int64"
          },
          "toNationalCode": {
            "minLength": 1,
            "type": "string"
          },
          "toInvestorAccountCode": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "TwoFactorAuthenticationType": {
        "enum": [
          0,
          1,
          2,
          3
        ],
        "type": "integer",
        "description": "\n\n0 = None\n\n1 = SMS\n\n2 = Email\n\n3 = App",
        "format": "int32",
        "x-enumNames": [
          "None",
          "SMS",
          "Email",
          "App"
        ],
        "x-enumDescriptions": [
          "",
          "",
          "",
          ""
        ]
      },
      "UnderCautionStateEnum": {
        "enum": [
          0,
          1,
          2,
          3
        ],
        "type": "integer",
        "description": "\n\n0 = Normal\n\n1 = Suspension\n\n2 = IncludedSuspensionProcess\n\n3 = UnderCaution",
        "format": "int32",
        "x-enumNames": [
          "Normal",
          "Suspension",
          "IncludedSuspensionProcess",
          "UnderCaution"
        ],
        "x-enumDescriptions": [
          "",
          "",
          "",
          ""
        ]
      },
      "UpdateOrderModel": {
        "required": [
          "orderId",
          "price",
          "quantity"
        ],
        "type": "object",
        "properties": {
          "orderId": {
            "type": "integer",
            "format": "int32"
          },
          "price": {
            "maximum": 1000000000,
            "minimum": 1,
            "type": "number",
            "format": "decimal",
            "default": 0
          },
          "quantity": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "validityType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ValidityType"
              }
            ],
            "description": "\n\n1 = Day (Day)\n\n2 = GoodTillCanceld (Good until canceled)\n\n3 = GooTillDate (Good until date)\n\n4 = FiilOrKill (Fill or Kill)",
            "x-enumNames": [
              "Day",
              "GoodTillCanceld",
              "GooTillDate",
              "FiilOrKill"
            ],
            "x-enumDescriptions": [
              "Day",
              "Good until canceled",
              "Good until date",
              "Fill or Kill"
            ]
          },
          "validityDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "checkSum": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserCredentials": {
        "required": [
          "password",
          "userName"
        ],
        "type": "object",
        "properties": {
          "userName": {
            "minLength": 1,
            "type": "string"
          },
          "password": {
            "minLength": 1,
            "type": "string"
          },
          "captchaCode": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "captchaId": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "otp": {
            "type": "string",
            "description": "Only required on two-step verificaiton",
            "default": null,
            "nullable": true
          },
          "alternativeFactor": {
            "maximum": 2,
            "minimum": 1,
            "allOf": [
              {
                "$ref": "#/components/schemas/TwoFactorAuthenticationType"
              }
            ],
            "description": "Alternative factor, on missing active 2fa factor\r\nvalid value: Sms, Email\n\n0 = None\n\n1 = SMS\n\n2 = Email\n\n3 = App",
            "default": null,
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserOTPCredentials": {
        "required": [
          "password",
          "userName"
        ],
        "type": "object",
        "properties": {
          "userName": {
            "minLength": 1,
            "type": "string"
          },
          "password": {
            "minLength": 1,
            "type": "string"
          },
          "captchaCode": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "captchaId": {
            "type": "string",
            "default": null,
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ValidityType": {
        "enum": [
          1,
          2,
          3,
          4
        ],
        "type": "integer",
        "description": "\n\n1 = Day (Day)\n\n2 = GoodTillCanceld (Good until canceled)\n\n3 = GooTillDate (Good until date)\n\n4 = FiilOrKill (Fill or Kill)",
        "format": "int32",
        "x-enumNames": [
          "Day",
          "GoodTillCanceld",
          "GooTillDate",
          "FiilOrKill"
        ],
        "x-enumDescriptions": [
          "Day",
          "Good until canceled",
          "Good until date",
          "Fill or Kill"
        ]
      },
      "ValueType": {
        "enum": [
          1,
          2
        ],
        "type": "integer",
        "description": "\n\n1 = Amount\n\n2 = Percent",
        "format": "int32",
        "x-enumNames": [
          "Amount",
          "Percent"
        ],
        "x-enumDescriptions": [
          "",
          ""
        ]
      },
      "VerifyForgetPasswordModel": {
        "required": [
          "code",
          "nationalCode",
          "password"
        ],
        "type": "object",
        "properties": {
          "nationalCode": {
            "minLength": 1,
            "type": "string"
          },
          "code": {
            "minLength": 1,
            "type": "string"
          },
          "password": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "ViewMarketType": {
        "enum": [
          1,
          2
        ],
        "type": "integer",
        "description": "\n\n1 = Bourse (Bourse (بورس))\n\n2 = FaraBourse (FaraBourse (فرابورس))",
        "format": "int32",
        "x-enumNames": [
          "Bourse",
          "FaraBourse"
        ],
        "x-enumDescriptions": [
          "Bourse (بورس)",
          "FaraBourse (فرابورس)"
        ]
      },
      "WatchListModel": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "note": {
            "type": "string",
            "nullable": true
          },
          "priority": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "WatchListUpdateModel": {
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "note": {
            "type": "string",
            "nullable": true
          },
          "priority": {
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "WithdrawalRequestModel": {
        "required": [
          "amount",
          "customerBankAccountId",
          "withdrawalDate"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "maximum": 1000000000000000,
            "minimum": 1,
            "type": "number",
            "format": "decimal"
          },
          "customerBankAccountId": {
            "type": "integer",
            "format": "int32"
          },
          "withdrawalDate": {
            "type": "string",
            "format": "date-time"
          },
          "comments": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "apiKey",
        "description": "JWT Authorization header using the Bearer scheme. Example: \"Authorization: Bearer {token}\"",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "bearerAuth": [ ]
    }
  ]
}